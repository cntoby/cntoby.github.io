<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老白说</title>
  
  <subtitle>讲述老白身边的故事</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.tobycn.org/"/>
  <updated>2018-06-07T02:53:41.266Z</updated>
  <id>https://www.tobycn.org/</id>
  
  <author>
    <name>老白</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>I&#39;m back</title>
    <link href="https://www.tobycn.org/2018/06/06/I-m-back/"/>
    <id>https://www.tobycn.org/2018/06/06/I-m-back/</id>
    <published>2018-06-06T06:17:57.000Z</published>
    <updated>2018-06-07T02:53:41.266Z</updated>
    
    <content type="html"><![CDATA[<p>打开博客看了看，上一篇日志已经是一年半前发的了，不是我不想写点什么，而是越来越不知道该写点儿什么了。</p><p>昨天看了王爷重发的新日志，又让我再一起决定还是写点什么吧，当是日记吐糟，或是对日渐生疏的文字表达能力进行一些锻炼，不求长进，但求不要退化也就满足了。</p><p>要说起来，最近一年半以来，也不是没有写点什么的念头，只是开始写了一半却没有时间继续下去，然后就淡了兴致。其中有一次是跟一个主播的辩论，让我想把我的我周边人的感悟写出来，这样的话题自然从自身写起更容易，结果写着写着，突然又让我忆起了与夫人初识的美好，之后脑子似乎就没了条理，千头万緒不知道从哪里开始写起了。</p><p>与夫人相爱七年后结婚，而婚后至今又有九年，时光易逝，与夫人在一起已有十六年，这十六年中自然会有争吵，甚至严重到冷战到有离婚的念头，不过对对方的情感与依赖终会战胜分歧，而且这些争吵也没有严重到伤害感情的程度，反正每次争吵后我都能感觉到我们之间的理解更深一层，我想这大概是亲情增进的一个过程吧。自夫人第一次为了我放弃工行的工作陪我一起北漂，到为了备孕生子放弃工作，再到为了生二宝基本放弃了几年锻炼的成果，这么多年来夫人的付出远大过于我，在外人看来，我独立支撑家里的经济付出的似乎更多，其实不然，男人天生更适合在外打拼（这么好像有点直男癌，但是在人类进入以耕种为主的农业社会以后，这种天然的分工就已经形成，我相当认同这种观点），独立支撑家庭的经济来源当然压力很大，身体不敢出问题，工作不敢断档，但是男人的任务也主要就是工作，而夫人留在家里却负责了收入之外的所有事，孩子的吃穿住行、上学写作业哪样都离不开妈妈，家里的打扫家务做饭夫人也要负担起来，更因为我在异地工作，夫人更是承担起了好多男人的活，简单的换灯管，新家的装修也落在了夫人肩上，选材料门窗找装修师傅，心疼，即便是在这样的压力之下，夫人还是决定给我生第二个孩子，到这里我已经无能再说什么，只想好好陪着她和孩子们，和她一起慢慢变老。</p><p>感悟抒发告一段落，每次想到家老婆孩子时，想写点儿什么都是缺乏条理的，后面还是写点儿其它的吧。</p><a id="more"></a><p>这一年半来发生的事情确实是超级多，首先，就是前东家的项目失败，股东的投资自然是无能收回的，而我的工资也被欠了15万，这让我很受伤啊，导致这一状况引发了一系列压力转移叠加，结果就导致过年前后我的压力倍增，甚至想着要不就不回北京了，直接在南宁找一份差不多的工作也不是什么难事，将就做着唄，反正生活肯定是没问题的。当然了，这个想法并没有成为现实，我还是回了北京，进了一家不错的公司。</p><p>最有意思的事情是，两位朋友兼合作伙伴在年后来了柳州，一起做了些事情，而且陪他们好好体验了一把柳州人的生活，螺蛳粉烤串啥的吃了一溜够，估计短期间他们是看不上北京卖的螺蛳粉了。本来我们已经是在勉强支撑了，不过好在最后总算是出现了转机，总之我又可以常常见到王爷，这是大喜事呀，希望这样的境况能够长久，只是这对于王爷的家人似乎又是一个需要艰难适应的时期。</p><p>这次回来北京，我决定弥补我从小就有的那个不会画画的遗憾，我希望能分配出一定的时间来练习绘画，我知道绘画除了天赋其实更重要的是练习，只要努力练，那肯定能画出像样的东西，不能成为艺术那就成为技术吧，技术都是可训练出来的，希望一年后我能在这里贴出像样的作品。</p><p>下次不在上班时间写日志了，这篇日志是做为回归宣言放出来的，希望这次能多写一些不一样的东西吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打开博客看了看，上一篇日志已经是一年半前发的了，不是我不想写点什么，而是越来越不知道该写点儿什么了。&lt;/p&gt;
&lt;p&gt;昨天看了王爷重发的新日志，又让我再一起决定还是写点什么吧，当是日记吐糟，或是对日渐生疏的文字表达能力进行一些锻炼，不求长进，但求不要退化也就满足了。&lt;/p&gt;
&lt;p&gt;要说起来，最近一年半以来，也不是没有写点什么的念头，只是开始写了一半却没有时间继续下去，然后就淡了兴致。其中有一次是跟一个主播的辩论，让我想把我的我周边人的感悟写出来，这样的话题自然从自身写起更容易，结果写着写着，突然又让我忆起了与夫人初识的美好，之后脑子似乎就没了条理，千头万緒不知道从哪里开始写起了。&lt;/p&gt;
&lt;p&gt;与夫人相爱七年后结婚，而婚后至今又有九年，时光易逝，与夫人在一起已有十六年，这十六年中自然会有争吵，甚至严重到冷战到有离婚的念头，不过对对方的情感与依赖终会战胜分歧，而且这些争吵也没有严重到伤害感情的程度，反正每次争吵后我都能感觉到我们之间的理解更深一层，我想这大概是亲情增进的一个过程吧。自夫人第一次为了我放弃工行的工作陪我一起北漂，到为了备孕生子放弃工作，再到为了生二宝基本放弃了几年锻炼的成果，这么多年来夫人的付出远大过于我，在外人看来，我独立支撑家里的经济付出的似乎更多，其实不然，男人天生更适合在外打拼（这么好像有点直男癌，但是在人类进入以耕种为主的农业社会以后，这种天然的分工就已经形成，我相当认同这种观点），独立支撑家庭的经济来源当然压力很大，身体不敢出问题，工作不敢断档，但是男人的任务也主要就是工作，而夫人留在家里却负责了收入之外的所有事，孩子的吃穿住行、上学写作业哪样都离不开妈妈，家里的打扫家务做饭夫人也要负担起来，更因为我在异地工作，夫人更是承担起了好多男人的活，简单的换灯管，新家的装修也落在了夫人肩上，选材料门窗找装修师傅，心疼，即便是在这样的压力之下，夫人还是决定给我生第二个孩子，到这里我已经无能再说什么，只想好好陪着她和孩子们，和她一起慢慢变老。&lt;/p&gt;
&lt;p&gt;感悟抒发告一段落，每次想到家老婆孩子时，想写点儿什么都是缺乏条理的，后面还是写点儿其它的吧。&lt;/p&gt;
    
    </summary>
    
      <category term="日常生活" scheme="https://www.tobycn.org/categories/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="日常" scheme="https://www.tobycn.org/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>掉进咖啡的大坑</title>
    <link href="https://www.tobycn.org/2016/11/18/Fall-into-coffee-trap/"/>
    <id>https://www.tobycn.org/2016/11/18/Fall-into-coffee-trap/</id>
    <published>2016-11-18T07:42:15.000Z</published>
    <updated>2018-03-08T02:46:48.047Z</updated>
    
    <content type="html"><![CDATA[<h1>开篇明义</h1><p>按照习惯，在这部分是明不了义的，纯粹是无法进入正文，于是瞎说几句。今天跟<a href="http://tigerwang.us" target="_blank" rel="noopener">王爷</a>聊天，喜闻他老人家今儿又开始更新博客了，于是我想，是否也应该写点儿东西了，打开很久没关心过的部落格才发现，上次的那一篇已经是一年前的事了，顿感时间飞逝时不我待。<br>今天同事L问起，说什么样的话题能让你体会到时间过得飞快？『你不妨想想，十年前已经不是1996年了？』，心中顿时起了恐慌的感觉。</p><h1>关于咖啡</h1><p>对于咖啡我本不是很喜欢的，或是当时不知如何欣赏如何品鉴，总之对其提不起兴趣，总觉不如茶让我感觉悠闲舒适。直到有一天，王爷带我去尝试了一次单品咖啡，然后我就慢慢有种将要掉入大坑的趋势，不过此时并没有意识到单品和美式的区别，直到买了一本叫做《咖啡品鉴大全》的书，应该是这本书，是一个日本人写的，铜板纸、彩色印刷，非常精美，是我喜欢的那种书，由这本书我对咖啡加深了很多的了解，包括种属、产地、海拔，亦是烘焙研磨萃取的基础知识。</p><p>好吧，关于这本书就说这些吧，再说回入坑咖啡，这又得讲到<a href="http://tigerwang.us" target="_blank" rel="noopener">坑王爷</a>，两周前的一个周末，我去了一趟沈阳王爷家，王爷是个热情的人，其中各种热情招待就不细说了，就说王爷给我按摩了两下子，其实这也跟咖啡没关系，只是我从来没被男人按摩过啊，而且还是当着他夫人的面帮我按的，嗯，幸亏是当着夫人面按的。</p><p>还是说回咖啡，各种热情招待暂且不表，且说到沈阳的第二天早晨，和王爷去了一家叫BOK的咖啡馆，其实里面的环境并不是我喜欢的那种，但是这不是重点，就是那天早晨的一杯美式咖啡，让我突然对咖啡有了一种强烈的感觉，不知道这种感觉从何而来，总之，是一种强烈的感觉，那种感觉让甚至一度的觉得可能以后再也离不开咖啡了，而早晨时来一杯咖啡也许就是我最想要的，只不过一直没有发现而已。</p><p>王爷说我是个容易入坑的人，或者说是容易被他推进坑的人，细想来确实如此，但如果换一个角度来说，这不正是我能和王爷成为至交好友的原因吗，他或我分享一些东西常常刚好击中对方的兴趣点，心有灵犀就是形容这种感觉的吧，不过我更愿意称之为默契。</p><a id="more"></a><h1>坑</h1><p>曾在某本书上看到『爱上咖啡是你的幸运，但爱上咖啡器具是你的不幸』，别问我这是谁说的，谁让咱看书杂呐，更也许是我自己脑子里想的觉得有道理就冠之以『某本书上说』，之所以这么说，我想大概就是因为咖啡器具种类繁多吧，不过咱毕竟不是专业的，没必要购入太多的设备，但是做为业余好之者，总要有几件可以拿出手的玩意儿悦人悦己吧。</p><p>插上一句，前面自诩看书杂，其实又是得益于王爷的教导，之前我是非技术类书籍不买不看的，现在不管是人文或是艺术或是其它不好分类的书我都有可能买，而且并不会认为这是浪费，所以要说近几年对我人生影响最大的人，除了我媳妇儿那肯定就是王爷了。</p><p>这次极大的动心刚好遇到了臭名昭著的双十一，于是也在双十一时入了几件小装备，就这点又是被王爷心里鄙视的，别问我是咋知道的，默契就是这么心有灵犀的，不过能在这几天便宜一些入手几件装备，那就意味着可以多买几包豆子，划得来的。</p><p>列举一下这次入的小设备：</p><ul><li>法压壶 x 1  (台湾Hero)  ￥71</li><li>滤杯分享杯套装 x 1  (台湾Hero) ￥124</li><li>Porlex mini 手摇磨豆机 x 1 (日本) ￥262.54</li><li>Mr.Clever 聪明杯 x 1 (台湾) ￥98.7</li></ul><p>共消费555.54，其中除得到这些装备外，还获得赠送的250克x3包咖啡豆，分别是曼特宁G1、巴西海湖庄园、危地马拉Azotea庄园安提瓜，另外，还有聪明杯配套滤纸及滤杯配套滤纸，因此，基本上在这些装备的帮助下，我应该可以完全入门手冲及法压壶。<br>至于聪明杯，那是个像法压壶和手冲那样制作咖啡的东西，感觉更像法压壶，浸泡滤出。</p><p>如上所述，其实坑不算大，可是问题就在于，我还看上了一套镀金的手冲设备，当然对于我来说，我并无追求极致装备之心，连门还没入的人要啥自行车啊，不过话说回来那些东西看着还是相当的痒的。另外，我还想要不要买台半自动意式咖啡机，但是想来想去，既然决心走单品精品咖啡的路，还再倒回头去捣鼓拼配豆子的咖啡，没有必要吧，而且现在家里这些设备我还玩不过来呐。</p><h1>另一个坑</h1><p>关于咖啡的坑，其实不仅仅是说设备器具，也许如果只是弄个意式咖啡机或是胶囊咖啡机，只要去买咖啡粉或是胶囊就可以了，快捷方便。但是要说到自己制作单品，我想这坑可并不器具小啊。</p><p>先从咖啡豆说起，常见的咖啡豆应该说是有三种吧，什么阿拉比卡、罗比斯塔、利比里亚，但是咱是要自己做单品咖啡的，所以其实也就只了解阿拉比卡就可以了，问题是，光是阿拉比卡豆也很复杂啊，不同产地、不同杂交品种、不同海拔、口感啥的，咱只是准备入门者，不要考虑太多，也考虑不了太多，就只了解那么几种常见精品豆，我准备做较深入了解的暂时选定了三种，肯尼亚、曼特宁、耶加雪菲，光这三种豆就归属于三个产区吧？没准备求甚解，等了解多了自然会知道的吧。</p><p>选定了咖啡豆就该考虑烘焙的问题了吧，不过咱是初学者，烘焙太高深就交给专业人士了，但是至少烘焙深度要做一些了解的吧，什么豆适合深烘哪些豆适合浅烘哪些豆在哪种烘焙程度才能更突出豆子本身的特点等等，烘焙的事对于咱来说那是日后再说的事儿。</p><p>等豆子烘焙完了，这就轮到亲自动手的时候了，研磨，对于研磨来说最重要的是粗细均匀以免萃取时不够均衡，其实研磨说起来并不难，找一个合适的工具而已，我用的是Porlex mini，说起来这是个好东西，小巧便携、操作简单，这么好的东西当然是王爷推荐的。我用过几次，调整好研磨粗细，然后一只手紧紧握住又粗又硬的那一根，另一手轻轻握住小巧圆润的那端，然后软磨慢摇，速度一定要平稳柔和，摇的速度太快就会变热、最美好的那些就很容易被弄出来。</p><p>磨好的咖啡粉应该尽快冲泡饮用，否则，据说在两分钟内，咖啡粉中70%易于挥发的美好味道就会挥发掉，所以，我会选择在磨豆之前就准备好滤杯准备好热水，豆子磨好后，直接用热水浸湿滤纸，然后放置咖啡粉，把分享杯中的水倒掉，平稳的往咖啡粉上浇水，进行半分钟焖蒸，之后缓速往咖啡粉上浇水，顺时针或逆时针选定一个方向，从中心一圈圈绕至边缘继而再绕至中心，如此反复，直到萃取到想要的杯量或是萃取取的咖啡液快速变淡，需要注意的是过程中不要把水直接浇到滤纸上。</p><p>之后当然就是喝了，至于怎么喝，每个人的爱好不同，但是最好是好好品味一下自己的劳动成果，那感觉美妙极了，当我第一次喝到自己手冲的咖啡时我惊呆了，那是我自喝咖啡以来喝到的最美味的咖啡。</p><h1>最后</h1><p>对于咖啡我了解的还很少，不过由现在的兴趣带领，我相信一定会从中获得更多的乐趣。</p><p>再说回开头说到的时间问题，最近越来越感觉到，我的心态在变化，也许是因为年龄越来越大，对人生对生活自然会有所感悟，每临大事有静气，这也是一种境界吧，越是年龄大了就越要从容，之前对我来说，喝茶是一件从容的事，而喝咖啡是一件太急切太功利的事，而自从知道了单品体会了手冲的乐趣，我才知道，其实这才是喝咖啡，而那些速溶或是咖啡馆里买一杯基于Espresso的花样咖啡，那基本上只是咖啡饮品而已。就像饮茶，煮水、投茶、观形、嗅气、品味，入腹只是最后一步完成饮品解渴的使命而已，同样，喝咖啡的过程也应当如此才能喝出真正的味道吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;开篇明义&lt;/h1&gt;
&lt;p&gt;按照习惯，在这部分是明不了义的，纯粹是无法进入正文，于是瞎说几句。今天跟&lt;a href=&quot;http://tigerwang.us&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;王爷&lt;/a&gt;聊天，喜闻他老人家今儿又开始更新博客了，于是我想，是否也应该写点儿东西了，打开很久没关心过的部落格才发现，上次的那一篇已经是一年前的事了，顿感时间飞逝时不我待。&lt;br&gt;
今天同事L问起，说什么样的话题能让你体会到时间过得飞快？『你不妨想想，十年前已经不是1996年了？』，心中顿时起了恐慌的感觉。&lt;/p&gt;
&lt;h1&gt;关于咖啡&lt;/h1&gt;
&lt;p&gt;对于咖啡我本不是很喜欢的，或是当时不知如何欣赏如何品鉴，总之对其提不起兴趣，总觉不如茶让我感觉悠闲舒适。直到有一天，王爷带我去尝试了一次单品咖啡，然后我就慢慢有种将要掉入大坑的趋势，不过此时并没有意识到单品和美式的区别，直到买了一本叫做《咖啡品鉴大全》的书，应该是这本书，是一个日本人写的，铜板纸、彩色印刷，非常精美，是我喜欢的那种书，由这本书我对咖啡加深了很多的了解，包括种属、产地、海拔，亦是烘焙研磨萃取的基础知识。&lt;/p&gt;
&lt;p&gt;好吧，关于这本书就说这些吧，再说回入坑咖啡，这又得讲到&lt;a href=&quot;http://tigerwang.us&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;坑王爷&lt;/a&gt;，两周前的一个周末，我去了一趟沈阳王爷家，王爷是个热情的人，其中各种热情招待就不细说了，就说王爷给我按摩了两下子，其实这也跟咖啡没关系，只是我从来没被男人按摩过啊，而且还是当着他夫人的面帮我按的，嗯，幸亏是当着夫人面按的。&lt;/p&gt;
&lt;p&gt;还是说回咖啡，各种热情招待暂且不表，且说到沈阳的第二天早晨，和王爷去了一家叫BOK的咖啡馆，其实里面的环境并不是我喜欢的那种，但是这不是重点，就是那天早晨的一杯美式咖啡，让我突然对咖啡有了一种强烈的感觉，不知道这种感觉从何而来，总之，是一种强烈的感觉，那种感觉让甚至一度的觉得可能以后再也离不开咖啡了，而早晨时来一杯咖啡也许就是我最想要的，只不过一直没有发现而已。&lt;/p&gt;
&lt;p&gt;王爷说我是个容易入坑的人，或者说是容易被他推进坑的人，细想来确实如此，但如果换一个角度来说，这不正是我能和王爷成为至交好友的原因吗，他或我分享一些东西常常刚好击中对方的兴趣点，心有灵犀就是形容这种感觉的吧，不过我更愿意称之为默契。&lt;/p&gt;
    
    </summary>
    
      <category term="coffee" scheme="https://www.tobycn.org/categories/coffee/"/>
    
    
      <category term="coffee" scheme="https://www.tobycn.org/tags/coffee/"/>
    
  </entry>
  
  <entry>
    <title>Booting Archlinux from USB Stick in Gen8 Server</title>
    <link href="https://www.tobycn.org/2015/11/25/Booting-Archlinux-from-USB-Stick-in-Gen8-Server/"/>
    <id>https://www.tobycn.org/2015/11/25/Booting-Archlinux-from-USB-Stick-in-Gen8-Server/</id>
    <published>2015-11-25T03:15:16.000Z</published>
    <updated>2018-03-08T02:46:48.045Z</updated>
    
    <content type="html"><![CDATA[<h1>冲动的入手Gen8</h1><p>看上Gen8已经很久了，一直因为价格问题和纠结于买来后是否有用的问题而迟迟没有下手，这次总算是借着双11的机会，再加上京东白条免息免手续费分期，算了一下，很划算呀，每月还不了多少钱，感觉很合适。因为太过激动，就忘了硬盘的事，于是又弄了两块2T的红盘，因为考虑最终要做Raid10，所以就不准备直接把系统安排在四个主要的硬盘位上，光驱位是个好地方，这也是Gen8的玩家们常用来放第五块硬盘的位置，于是又搞了一块120<s>T</s>G<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>的SSD硬盘，好在这块硬盘并不贵，因为后来启动服务器时，发现启动系统最浪费时间的地方根本就不在硬盘上。</p><p>本来以为硬盘到位后就可以开始玩起哪，谁知道，手上存的几根数据线根本就没办法用，要么不够长，要么接口不对，然后又满网上找合适的线，前两条买回来还不对，靠，那两条线还都写了Gen8专用啥啥的，坑啊，也怪我没认真去看那几根线的接口，只是看到Gen8专用就以为没问题哪。</p><p>在数据线到手后又折腾了一对电力猫，以便为服务器提供稳定的网络，不过话说回来，电力猫确实是好东西，通过电力线路传输网络信号，在现在这个信道几乎全部会被占用的大环境里，能方便的使用有线网络，那绝对是改变生活质量的举措啊。</p><p>后来一想，反正这些东西都备齐了也不差几根好点的网线了，于是又搞了几条超六类网线，不知是心理作用还是实际效果，反正感觉上来说好像确实上网感受好了不少哪。</p><h1>折腾Gen8</h1><p>因为不想以后再麻烦的拆装硬盘什么的，又买了两个2.5转3.5的硬盘盒，用来安装我之前的两个移动硬盘到服务器，再加上新买的两块红盘，硬盘仓的四个位置全部占满，然后再加上SSD硬盘安装系统，一共五块硬盘都安装在服务器上。</p><p>然后服务器上的两根网线都连到路由器上，一根是iLo另一根就是系统要用的了，到此为止，所有准备工作都准备好了，可以正式开始折腾了，哦对了，我还去HP官网申请了一个iLo专业版的试用证书，要不然是不能使用iLo的Remote Console功能的，因为家里用的是iMac，没有多余的显示器给服务器用，所以，这个Remote Console绝对是好东西，还可以把ISO虚拟成光盘给服务器使用，绝对是利器。</p><a id="more"></a><p>Arch Linux应该算是我最爱的一个Linux发行版了，最早的时候超爱Gentoo，因为我偏爱可定制度更高的系统，但是随着年龄的增长发现兴趣或是偏好也在改变，当然还是喜欢定制度高的系统，但是却不喜欢太折腾了，所以首先就是放弃了Gentoo而转向Arch Linux，首先，Arch Linux是有着Gentoo的相似的特点的，就是系统本身是最简的，没有多余的东西，所有的东西都需要亲自动手一点点搭建，但是好处是不需要所有的软件都从头编译，而Arch Linux的包管理工具提供的各种软件又都是针对不同平台进行过优化编译的，在性能方向是不会有问题的，还有就是，Arch Linux的启动速度是相当之快的，当然了，这一点在系统用于服务器时并不重要。</p><p>为了方便，直接下载了Arch Linux最新的镜像文件，然后安排在服务器的第五块硬盘上，并且正确的安装了Grub，然后我就天真的以为可以启动系统了，结果，<code>reboot</code>命令执行后就傻逼了，电脑根本找不到启动盘，Google之后才知道，硬盘启动时系统只认第一第二个硬盘位的启动盘和U盘以及TF卡的位置，我第一第二硬盘位还要用来做RAID，肯定不能拿来装系统，只能想办法从U盘或TF卡位启动了，翻箱倒柜半天找出了很久不用的两个U盘，因为U盘只用来做启动盘，正常情况下系统不会使用启动盘，所以，我估摸着这两个U盘应该够我用几年了吧。</p><p>于是重新加载ISO镜像启动进Live系统，格式化U盘，分出<code>/boot</code>区，重新安装<code>grub</code>到U盘，再次<code>reboot</code>。</p><h1>不能从U盘启动</h1><p>意外的事发生了，系统并没有如预料中的那样正常启动起来。事后想来，这个问题其实就是因为粗心造成的，众所周知，系统的启动分区是必须要设置成<code>bootable</code>的，但是因为我在第一次安装系统时启动盘不是Grub，结果后来重新安装启动信息到U盘时就忘了最重要的一步，把分区设置成<code>bootable</code>，而这个小疏忽让我浪费了差不多三天的业余时间去试图寻找问题所在，期间尝试了修改启动盘顺序、重新安装启动信息等方式，但是一直没有奏效，我甚至都差点以为是电脑出了硬盘问题或是U盘本身有问题，然后又想起这个U盘之前装过PE，一直也是正常使用的呀，然后一个念头就出现了，我猜自己犯了愚蠢的错误，于是再一次加载ISO，启动进系统，<code>fdisk /dev/sdf</code>，<code>p</code>，果然，启动分区上并没有<code>A</code>标志，马上加上标志，<code>reboot</code>，这一次系统成功启动。</p><p>先入为主害死人，这也是很多人都会犯的经验主义，当你觉得不会犯某个错误时，那可能就很危险了，那个错误可能会造成严重后果，比如在管理数据时，常常觉得直接执行一个<code>DELETE</code>指令不会出问题，然后后果可能是清空了整个表，这样的错误我也犯过，值得警惕。</p><h1>等待继续折腾</h1><p>系统算是安装完了，不过这个时候游戏才刚刚开始，在我的计划中要完成的事情中，这台服务器要给配置成家里的媒体服务器、文件服务器，这只是初步的计划，下一步，这台服务器将为我提供远程的备份功能，比如在手机上顺手记一些idea，或是记帐，或是文件等等，另外，还要提供远程管理下载任务的功能，这都需要时间去一步步的完成，也许这需要花费整个2016年的业余时间，毕竟还有工作要完成，关于这些设计，有时间的话专门再写一篇儿吧。</p><h1>后记</h1><p>这篇博开题是在11月25号，今天已经是1月11号了，这差不多快两个月过去才又抽出时间来完成它，忙再加上懒，于是事情就无限被拖延了。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="http://tigerwang.us" target="_blank" rel="noopener">王爷</a>火眼金睛 <a href="#fnref1" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;冲动的入手Gen8&lt;/h1&gt;
&lt;p&gt;看上Gen8已经很久了，一直因为价格问题和纠结于买来后是否有用的问题而迟迟没有下手，这次总算是借着双11的机会，再加上京东白条免息免手续费分期，算了一下，很划算呀，每月还不了多少钱，感觉很合适。因为太过激动，就忘了硬盘的事，于是又弄了两块2T的红盘，因为考虑最终要做Raid10，所以就不准备直接把系统安排在四个主要的硬盘位上，光驱位是个好地方，这也是Gen8的玩家们常用来放第五块硬盘的位置，于是又搞了一块120&lt;s&gt;T&lt;/s&gt;G&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;的SSD硬盘，好在这块硬盘并不贵，因为后来启动服务器时，发现启动系统最浪费时间的地方根本就不在硬盘上。&lt;/p&gt;
&lt;p&gt;本来以为硬盘到位后就可以开始玩起哪，谁知道，手上存的几根数据线根本就没办法用，要么不够长，要么接口不对，然后又满网上找合适的线，前两条买回来还不对，靠，那两条线还都写了Gen8专用啥啥的，坑啊，也怪我没认真去看那几根线的接口，只是看到Gen8专用就以为没问题哪。&lt;/p&gt;
&lt;p&gt;在数据线到手后又折腾了一对电力猫，以便为服务器提供稳定的网络，不过话说回来，电力猫确实是好东西，通过电力线路传输网络信号，在现在这个信道几乎全部会被占用的大环境里，能方便的使用有线网络，那绝对是改变生活质量的举措啊。&lt;/p&gt;
&lt;p&gt;后来一想，反正这些东西都备齐了也不差几根好点的网线了，于是又搞了几条超六类网线，不知是心理作用还是实际效果，反正感觉上来说好像确实上网感受好了不少哪。&lt;/p&gt;
&lt;h1&gt;折腾Gen8&lt;/h1&gt;
&lt;p&gt;因为不想以后再麻烦的拆装硬盘什么的，又买了两个2.5转3.5的硬盘盒，用来安装我之前的两个移动硬盘到服务器，再加上新买的两块红盘，硬盘仓的四个位置全部占满，然后再加上SSD硬盘安装系统，一共五块硬盘都安装在服务器上。&lt;/p&gt;
&lt;p&gt;然后服务器上的两根网线都连到路由器上，一根是iLo另一根就是系统要用的了，到此为止，所有准备工作都准备好了，可以正式开始折腾了，哦对了，我还去HP官网申请了一个iLo专业版的试用证书，要不然是不能使用iLo的Remote Console功能的，因为家里用的是iMac，没有多余的显示器给服务器用，所以，这个Remote Console绝对是好东西，还可以把ISO虚拟成光盘给服务器使用，绝对是利器。&lt;/p&gt;
    
    </summary>
    
      <category term="server" scheme="https://www.tobycn.org/categories/server/"/>
    
      <category term="archlinux" scheme="https://www.tobycn.org/categories/server/archlinux/"/>
    
    
      <category term="gen8" scheme="https://www.tobycn.org/tags/gen8/"/>
    
      <category term="boot" scheme="https://www.tobycn.org/tags/boot/"/>
    
      <category term="linux" scheme="https://www.tobycn.org/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Elisp Basics (more)</title>
    <link href="https://www.tobycn.org/2015/11/06/Elisp-Basics-more/"/>
    <id>https://www.tobycn.org/2015/11/06/Elisp-Basics-more/</id>
    <published>2015-11-06T06:34:09.000Z</published>
    <updated>2018-03-08T02:46:48.046Z</updated>
    
    <content type="html"><![CDATA[<h1>还是几句闲话</h1><p>刚加了一个大夜班，基本上等于通宵了，从前一天早晨10点一直上班到第二天早晨5点多才下班，在那个时间好像已经感觉不到明显的困意了，不过回到家基本上倒在床上就直接睡着了。睡到中午11点多自然醒了，算一下，这才睡了5个多小时，确实是老了吗？这觉也太少了些吧。</p><p>前天晚上写了一段关于Elisp的内容，昨天在家里呆着却迟迟不想接着写下来，不知道这是拖延症发作还是又是懒性大发抑或是这两者合并并生的效果，总之，我对于这种状态极其的不满意，是时候对自己多些管理，要不然都老了。</p><h1>Emacs Lisp</h1><p><a href="/2015/11/04/Elisp-Basics/">Elisp Basics</a>里简单写了一些关于Elisp的内容，今天再加一些关于循环、判断的部分，就可以算是Emacs Lisp最基础教程结束了，以后再写类似主题也只会是针对单个需求。</p><h2>IF THEN ELSE</h2><p>确切的说本语法分为<code>IF THEN</code>和<code>IF THEN ELSE</code>两种情况，不细说，看示例。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">if</span> (<span class="name">&lt;</span> <span class="number">3</span> <span class="number">4</span>) <span class="comment">; IF</span></span><br><span class="line"> (<span class="name">message</span> <span class="string">"3 is smaller than 4"</span>) <span class="comment">; THEN</span></span><br><span class="line"> )</span><br></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">if</span> (<span class="name">&gt;</span> <span class="number">3</span> <span class="number">4</span>) <span class="comment">; IF</span></span><br><span class="line"> (<span class="name">message</span> <span class="string">"3 is bigger than 4"</span>) <span class="comment">; THEN</span></span><br><span class="line"> (<span class="name">message</span> <span class="string">"4 is bigger than 3"</span>) <span class="comment">; ELSE</span></span><br><span class="line"> )</span><br></pre></td></tr></table></figure><p>在ELISP中，除了IF函数还有另外两种常用的类似函数，<code>when</code>和<code>unless</code>，其中<code>when</code>与IF的<code>IF THEN</code>用法一样，而<code>unless</code>则相反，看例子</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">when</span> (<span class="name">&gt;</span> <span class="number">3</span> <span class="number">2</span>) <span class="comment">; 当3大于2时</span></span><br><span class="line"> (<span class="name">message</span> <span class="string">"3 is bigger than 2"</span>)</span><br><span class="line"> )</span><br><span class="line">(<span class="name">unless</span> (<span class="name">&lt;</span> <span class="number">3</span> <span class="number">2</span>) <span class="comment">; 当3不小于2时</span></span><br><span class="line"> (<span class="name">message</span> <span class="string">"3 is bigger than 2"</span>)</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><a id="more"></a><h2>Iteration</h2><p>到目前为止，我知道的ELISP的循环函数只有<code>while</code>。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">setq</span> x <span class="number">0</span>)</span><br><span class="line">(<span class="name">while</span> (<span class="name">&lt;</span> x <span class="number">10</span>)</span><br><span class="line"> (<span class="name">message</span> <span class="string">"hello %d"</span> x)</span><br><span class="line"> (<span class="name">setq</span> x (<span class="number">1</span>+ x))</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><p>在这里还有一个需要考虑的问题，在很多时候，我们需要在循环运行的过程中主动退出循环，在其它语言中，我们有类似于<code>break</code>之类的语法，而ELISP是没有的，那应该怎么办哪？有限循环的过程是由条件控制的，当条件满足，则循环继续，否则，循环退出，那么，我们可以这样。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">setq</span> x <span class="number">0</span>)</span><br><span class="line">(<span class="name">while</span> (<span class="name">&lt;</span> x <span class="number">10</span>)</span><br><span class="line"> (<span class="name">message</span> <span class="string">"hello %d"</span> x)</span><br><span class="line"> (<span class="name">when</span> (<span class="name">=</span> x <span class="number">3</span>) (<span class="name">setq</span> x <span class="number">10</span>)) <span class="comment">; 在此处直接把x改为不满足循环条件，那么当前循环执行完整个循环也就结束了</span></span><br><span class="line"> (<span class="name">setq</span> x (<span class="number">1</span>+ x))</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><p>或者，为了让程序更干净一些，我们加一个专门用于控制循环的变量，如下</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">setq</span> x <span class="number">0</span>)</span><br><span class="line">(<span class="name">setq</span> found <span class="literal">nil</span>)</span><br><span class="line">(<span class="name">while</span> (<span class="name">and</span> (<span class="name">&lt;</span> x <span class="number">10</span>) (<span class="name">not</span> found))</span><br><span class="line"> (<span class="name">message</span> <span class="string">"hello %d"</span> x)</span><br><span class="line"> (<span class="name">when</span> (<span class="name">=</span> x <span class="number">3</span>) <span class="comment">; 达到特定情况，则把found设置为t，当前循环完成，则结束整个循环</span></span><br><span class="line">  (<span class="name">setq</span> found <span class="literal">t</span>)</span><br><span class="line">  )</span><br><span class="line"> (<span class="name">setq</span> x (<span class="number">1</span>+ x))</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><h2>函数定义</h2><p>关于函数定义就说一点最简单的，毕竟这篇文章只准备说点基础</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> my-function () <span class="comment">; defun 函数名 参数列表</span></span><br><span class="line"> <span class="string">"string document"</span>    <span class="comment">; 函数说明</span></span><br><span class="line"> (<span class="name">interactive</span>) <span class="comment">; 可交互使用的函数</span></span><br><span class="line"> (<span class="name">message</span> <span class="string">"hello defun"</span>)</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><p>就说这点吧，关于函数的定义，在使用的过程中可以再多写一些。</p><h1>结束</h1><p>感觉身体状态很差，头很容易不舒服，身体也更容易感觉累，睡眠质量也不行，等忙过这几天要去做一次体检了，看看哪里出了问题。</p><p>最近几个月的业余时间我感觉都给浪费了，没有认真做点事学些东西的心境，需要调整一下了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;还是几句闲话&lt;/h1&gt;
&lt;p&gt;刚加了一个大夜班，基本上等于通宵了，从前一天早晨10点一直上班到第二天早晨5点多才下班，在那个时间好像已经感觉不到明显的困意了，不过回到家基本上倒在床上就直接睡着了。睡到中午11点多自然醒了，算一下，这才睡了5个多小时，确实是老了吗？这觉也太少了些吧。&lt;/p&gt;
&lt;p&gt;前天晚上写了一段关于Elisp的内容，昨天在家里呆着却迟迟不想接着写下来，不知道这是拖延症发作还是又是懒性大发抑或是这两者合并并生的效果，总之，我对于这种状态极其的不满意，是时候对自己多些管理，要不然都老了。&lt;/p&gt;
&lt;h1&gt;Emacs Lisp&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;/2015/11/04/Elisp-Basics/&quot;&gt;Elisp Basics&lt;/a&gt;里简单写了一些关于Elisp的内容，今天再加一些关于循环、判断的部分，就可以算是Emacs Lisp最基础教程结束了，以后再写类似主题也只会是针对单个需求。&lt;/p&gt;
&lt;h2&gt;IF THEN ELSE&lt;/h2&gt;
&lt;p&gt;确切的说本语法分为&lt;code&gt;IF THEN&lt;/code&gt;和&lt;code&gt;IF THEN ELSE&lt;/code&gt;两种情况，不细说，看示例。&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;; IF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; (&lt;span class=&quot;name&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;3 is smaller than 4&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;; THEN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;; IF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; (&lt;span class=&quot;name&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;3 is bigger than 4&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;; THEN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; (&lt;span class=&quot;name&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;4 is bigger than 3&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;; ELSE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在ELISP中，除了IF函数还有另外两种常用的类似函数，&lt;code&gt;when&lt;/code&gt;和&lt;code&gt;unless&lt;/code&gt;，其中&lt;code&gt;when&lt;/code&gt;与IF的&lt;code&gt;IF THEN&lt;/code&gt;用法一样，而&lt;code&gt;unless&lt;/code&gt;则相反，看例子&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;when&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;; 当3大于2时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; (&lt;span class=&quot;name&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;3 is bigger than 2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;unless&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;; 当3不小于2时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; (&lt;span class=&quot;name&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;3 is bigger than 2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="emacs" scheme="https://www.tobycn.org/categories/emacs/"/>
    
    
      <category term="lisp" scheme="https://www.tobycn.org/tags/lisp/"/>
    
      <category term="elisp" scheme="https://www.tobycn.org/tags/elisp/"/>
    
      <category term="emacs" scheme="https://www.tobycn.org/tags/emacs/"/>
    
      <category term="functionally" scheme="https://www.tobycn.org/tags/functionally/"/>
    
  </entry>
  
  <entry>
    <title>Elisp Basics</title>
    <link href="https://www.tobycn.org/2015/11/04/Elisp-Basics/"/>
    <id>https://www.tobycn.org/2015/11/04/Elisp-Basics/</id>
    <published>2015-11-04T15:14:07.000Z</published>
    <updated>2018-03-08T02:46:48.046Z</updated>
    
    <content type="html"><![CDATA[<h1>闲话</h1><p>有很长时间没写Blog了，主要原因是，不够自律，没有坚持写下去，次要原因是，最近确实是忙了些，几乎每周都有一多半的时间是在下班的，由于这样的疲累，也导致了一旦不上班的时候就忙着休息了。</p><p>有时想想，其实忙并不是放松的理由，最主要的原因还是因为懒，这个是一定要改的，再不改我们就老了。</p><p>最近做了几件事，首先当然还是工作，游戏有前端进步非常大，与半年前相比几乎完全变成了另外一个游戏的感觉，加入了新角色，玩法系统也更丰富了，对于我负责的后端，除了加新功能，其它的变化并不大，但是有计划对架构底层的Cache系统进行改进，这将很大的提高系统的性能和稳定性；另外的事就是，关掉了<a href="https://www.linode.com/?r=96d9b6df5e3efbb5f409503c07db0a1d9dc39b61" target="_blank" rel="noopener">Linode</a>和<a href="http://www.vultr.com/?ref=6857104" target="_blank" rel="noopener">Vultr</a>主机，当然了，这跟这两家的服务质量无关，主要是我为合理调配资源。首先，开了一台AWS用来做<strong>佛跳墙</strong>的主力服务器，另外开了一台香港的主机用来放BLOG和小项目，而且同时在<a href="https://bandwagonhost.com/aff.php?aff=5395" target="_blank" rel="noopener">搬瓦工</a>和<a href="https://www.digitalocean.com/?refcode=b5ea84a7594f" target="_blank" rel="noopener">DigitalOcean</a>还各有一台VPS做备用的<strong>科学上网</strong>服，所以，这个时候还留着<a href="https://www.linode.com/?r=96d9b6df5e3efbb5f409503c07db0a1d9dc39b61" target="_blank" rel="noopener">Linode</a>和<a href="http://www.vultr.com/?ref=6857104" target="_blank" rel="noopener">Vultr</a>就是极大的浪费了吧。不过话说回来，这两家的东京服务器对于国内来说还是相当不错的，也就只比香港机房差一点吧。</p><h1>Emacs &amp; Elisp</h1><p>从使用Emacs开始到现在也有个几年了吧，不过大多数时间都是在别人配置的基础上进行修改，而且在Emacs上时多半都是一些中小型的开发和写作，这样的应用场景下，自然对于Emacs的配置要求就没有那么高了。趁着这段时间没什么学习新知识的想法，刚好可以再次拿起Emacs以及必须要掌握的Elisp好好学习一番了。</p><p>因为之前对Common Lisp有过一定程度上的了解，所以对于Elisp其实接受起来还是挺快的，在简单看了<a href="http://ergoemacs.org/emacs/elisp.html" target="_blank" rel="noopener">几篇关于Elisp的文章</a>后，对于Elisp的大概印象也就有一些，在这里仅对Elisp做一个简单的介绍，备忘吧。</p><a id="more"></a><h2>Printing</h2><ul><li>message<br>此函数用于输出信息到缓冲区<code>*Messages*</code>，并支持格式替换，如下：</li></ul><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">message</span> <span class="string">"hello"</span>) <span class="comment">; 最简单的输出</span></span><br><span class="line">(<span class="name">message</span> <span class="string">"hello, my age is %d"</span> <span class="number">35</span>) <span class="comment">; %d接受一个数字</span></span><br><span class="line">(<span class="name">message</span> <span class="string">"my name is %s"</span> <span class="string">"Toby"</span>) <span class="comment">; %s接受一个字符串</span></span><br><span class="line">(<span class="name">message</span> <span class="string">"a new list: %S"</span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)) <span class="comment">; %S 接受一个Lisp表达式</span></span><br><span class="line"><span class="comment">;; 在格式字符串中还支持%X,%x等。</span></span><br></pre></td></tr></table></figure><ul><li>print/prin1<br>本函数用于输出一个Lisp对象，两者的区别是，<code>prin1</code>不输出新行</li></ul><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">print</span> <span class="string">"HELLO"</span>)</span><br><span class="line">(<span class="name">prin1</span> <span class="string">"HELLO"</span>)</span><br></pre></td></tr></table></figure><ul><li>princ<br>输出对人类友好的内容</li></ul><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">princ</span> <span class="string">"hello"</span>) <span class="comment">; =&gt; hello</span></span><br><span class="line">(<span class="name">print</span> <span class="string">"hello"</span>) <span class="comment">; =&gt; "hello"</span></span><br></pre></td></tr></table></figure><ul><li>format<br>接受一个格式字符串和多个参数，返回字符串。</li></ul><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">print</span> (<span class="name">format</span> <span class="string">"hello %s"</span> <span class="string">"world))</span></span><br></pre></td></tr></table></figure><p>关于输出，还可以指定输出到的缓冲器或者输出到当前Buffer等，在这里就不细说了。</p><h2>数学运算</h2><p>Elisp支持所有的常见数学运算，如加减乘除等，以下只做举例</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">+</span> <span class="number">1</span> <span class="number">2</span>) <span class="comment">; =&gt; 3 加</span></span><br><span class="line">(<span class="name">-</span> <span class="number">2</span> <span class="number">1</span>) <span class="comment">; =&gt; 1 减</span></span><br><span class="line">(<span class="name">*</span> <span class="number">2</span> <span class="number">6</span>) <span class="comment">; =&gt; 12 乘</span></span><br><span class="line">(<span class="name">/</span> <span class="number">6</span> <span class="number">2</span>) <span class="comment">; =&gt; 3 除</span></span><br><span class="line">(<span class="name">/</span> <span class="number">5</span> <span class="number">2</span>) <span class="comment">; =&gt; 2 int相除取整数部分</span></span><br><span class="line">(<span class="name">/</span> <span class="number">5</span> <span class="number">2.0</span>) <span class="comment">; =&gt; 2.5 浮点型除法</span></span><br><span class="line">(% <span class="number">9</span> <span class="number">6</span>) <span class="comment">; =&gt; 3 取余</span></span><br><span class="line">(<span class="name">expt</span> <span class="number">3</span> <span class="number">3</span>) <span class="comment">; =&gt; 27 乘方</span></span><br></pre></td></tr></table></figure><p>另外，还有一些判断数据类型的函数，如</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">integerp</span> <span class="number">3</span>.) <span class="comment">; =&gt; t 判断是否为整型</span></span><br><span class="line">(<span class="name">floatp</span> <span class="number">3</span>.) <span class="comment">; =&gt; nil 是否为浮点型</span></span><br><span class="line">(<span class="name">floatp</span> <span class="number">3.0</span>) <span class="comment">; =&gt; t</span></span><br></pre></td></tr></table></figure><p>注：在Elisp中，在数字的点后面如果没有其它数字（包括0），则认为这个数字为整型。</p><h2>Boolean and Functions</h2><p>在Elisp中，只有<code>nil</code>和<code>()</code>为False，其它的都为True。同时，Elisp是支持逻辑或和逻辑与操作的，如下：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">and</span> <span class="literal">t</span> <span class="literal">nil</span>) <span class="comment">; =&gt; nil</span></span><br><span class="line">(<span class="name">or</span> <span class="literal">nil</span> <span class="literal">t</span>) <span class="comment">; =&gt; t</span></span><br></pre></td></tr></table></figure><h3>数字关系比较函数</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">&gt;</span> <span class="number">3</span> <span class="number">4</span>)</span><br><span class="line">(<span class="name">&lt;</span> <span class="number">3</span> <span class="number">4</span>)</span><br><span class="line">(<span class="name">&gt;=</span> <span class="number">3</span> <span class="number">4</span>)</span><br><span class="line">(<span class="name">&lt;=</span> <span class="number">3</span> <span class="number">4</span>)</span><br><span class="line">(<span class="name">=</span> <span class="number">5</span> <span class="number">5</span>)</span><br><span class="line">(<span class="name">=</span> <span class="number">5</span> <span class="number">5.0</span>)</span><br><span class="line">(<span class="name">/=</span> <span class="number">5</span> <span class="number">6</span>) <span class="comment">; 不等于，其它的关系不做解释，但是不等于函数与其它语言完全不同，一定要牢记</span></span><br></pre></td></tr></table></figure><h3>字符串专用比较函数</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">string-equal</span> <span class="string">"hello"</span> <span class="string">"hello) ; =&gt; t，比较字符串内容</span></span><br></pre></td></tr></table></figure><h3>通用比较函数</h3><p>对参数的数据类型及其值进行比较，只有全部相同时才为True</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">equal</span> <span class="string">"abc"</span> <span class="string">"abc"</span>) <span class="comment">; =&gt; t</span></span><br><span class="line">(<span class="name">equal</span> <span class="number">3</span> <span class="number">3</span>) <span class="comment">; =&gt; t</span></span><br><span class="line">(<span class="name">equal</span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>) '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)) <span class="comment">; =&gt; t</span></span><br></pre></td></tr></table></figure><h3>独特的比较函数<code>eq</code></h3><p>此函数比较参数是否为相同对象</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">eq</span> <span class="string">"abc"</span> <span class="string">"abc"</span>) <span class="comment">; =&gt; nil 此函数要与equal和string-equal区分开，两个字符串显然不是同一个对象</span></span><br><span class="line">(<span class="name">eq</span> 'abc 'abc) <span class="comment">; =&gt; t</span></span><br></pre></td></tr></table></figure><h3>逻辑取反</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">not</span> <span class="literal">t</span>) <span class="comment">; =&gt; nil</span></span><br></pre></td></tr></table></figure><h2>变量</h2><h3>全局变量</h3><p>两种设置方式，变量的值可以是Elisp支持的任何类型</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">setq</span> x <span class="number">1</span>) <span class="comment">; =&gt; 将x设置为1</span></span><br><span class="line">(<span class="name">setq</span> x <span class="number">1</span> y <span class="number">2</span> z <span class="number">3</span>) <span class="comment">; =&gt; 将x设为1,y设为2, z设为3</span></span><br></pre></td></tr></table></figure><h3>局部变量</h3><p>局部变量的初始化有两种方式，如下</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">let</span> (<span class="name">x</span> y)</span><br><span class="line">  (<span class="name">setq</span> x <span class="number">1</span>)</span><br><span class="line">  (<span class="name">setq</span> y <span class="number">2</span>)</span><br><span class="line">  (<span class="name">+</span> x y)</span><br><span class="line">  ) <span class="comment">; =&gt; 3 初始化方式1</span></span><br><span class="line"></span><br><span class="line">(<span class="name">let</span> ((<span class="name">x</span> <span class="number">1</span>) (<span class="name">y</span> <span class="number">2</span>))</span><br><span class="line">  (<span class="name">+</span> x y)</span><br><span class="line"> ) <span class="comment">; =&gt; 3 初始化方式2</span></span><br></pre></td></tr></table></figure><p>很显然，当变量为固定的值时，第2种初始化方式更便捷一些。</p><p>(TO BE CONTINUE)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;闲话&lt;/h1&gt;
&lt;p&gt;有很长时间没写Blog了，主要原因是，不够自律，没有坚持写下去，次要原因是，最近确实是忙了些，几乎每周都有一多半的时间是在下班的，由于这样的疲累，也导致了一旦不上班的时候就忙着休息了。&lt;/p&gt;
&lt;p&gt;有时想想，其实忙并不是放松的理由，最主要的原因还是因为懒，这个是一定要改的，再不改我们就老了。&lt;/p&gt;
&lt;p&gt;最近做了几件事，首先当然还是工作，游戏有前端进步非常大，与半年前相比几乎完全变成了另外一个游戏的感觉，加入了新角色，玩法系统也更丰富了，对于我负责的后端，除了加新功能，其它的变化并不大，但是有计划对架构底层的Cache系统进行改进，这将很大的提高系统的性能和稳定性；另外的事就是，关掉了&lt;a href=&quot;https://www.linode.com/?r=96d9b6df5e3efbb5f409503c07db0a1d9dc39b61&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Linode&lt;/a&gt;和&lt;a href=&quot;http://www.vultr.com/?ref=6857104&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vultr&lt;/a&gt;主机，当然了，这跟这两家的服务质量无关，主要是我为合理调配资源。首先，开了一台AWS用来做&lt;strong&gt;佛跳墙&lt;/strong&gt;的主力服务器，另外开了一台香港的主机用来放BLOG和小项目，而且同时在&lt;a href=&quot;https://bandwagonhost.com/aff.php?aff=5395&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;搬瓦工&lt;/a&gt;和&lt;a href=&quot;https://www.digitalocean.com/?refcode=b5ea84a7594f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DigitalOcean&lt;/a&gt;还各有一台VPS做备用的&lt;strong&gt;科学上网&lt;/strong&gt;服，所以，这个时候还留着&lt;a href=&quot;https://www.linode.com/?r=96d9b6df5e3efbb5f409503c07db0a1d9dc39b61&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Linode&lt;/a&gt;和&lt;a href=&quot;http://www.vultr.com/?ref=6857104&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vultr&lt;/a&gt;就是极大的浪费了吧。不过话说回来，这两家的东京服务器对于国内来说还是相当不错的，也就只比香港机房差一点吧。&lt;/p&gt;
&lt;h1&gt;Emacs &amp;amp; Elisp&lt;/h1&gt;
&lt;p&gt;从使用Emacs开始到现在也有个几年了吧，不过大多数时间都是在别人配置的基础上进行修改，而且在Emacs上时多半都是一些中小型的开发和写作，这样的应用场景下，自然对于Emacs的配置要求就没有那么高了。趁着这段时间没什么学习新知识的想法，刚好可以再次拿起Emacs以及必须要掌握的Elisp好好学习一番了。&lt;/p&gt;
&lt;p&gt;因为之前对Common Lisp有过一定程度上的了解，所以对于Elisp其实接受起来还是挺快的，在简单看了&lt;a href=&quot;http://ergoemacs.org/emacs/elisp.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;几篇关于Elisp的文章&lt;/a&gt;后，对于Elisp的大概印象也就有一些，在这里仅对Elisp做一个简单的介绍，备忘吧。&lt;/p&gt;
    
    </summary>
    
      <category term="functionally" scheme="https://www.tobycn.org/categories/functionally/"/>
    
      <category term="emacs" scheme="https://www.tobycn.org/categories/functionally/emacs/"/>
    
    
      <category term="lisp" scheme="https://www.tobycn.org/tags/lisp/"/>
    
      <category term="elisp" scheme="https://www.tobycn.org/tags/elisp/"/>
    
      <category term="emacs" scheme="https://www.tobycn.org/tags/emacs/"/>
    
      <category term="functionally" scheme="https://www.tobycn.org/tags/functionally/"/>
    
  </entry>
  
  <entry>
    <title>Start to learn Haskell 03</title>
    <link href="https://www.tobycn.org/2015/03/28/Start-to-learn-Haskell-03/"/>
    <id>https://www.tobycn.org/2015/03/28/Start-to-learn-Haskell-03/</id>
    <published>2015-03-28T06:13:31.000Z</published>
    <updated>2018-03-08T02:46:48.048Z</updated>
    
    <content type="html"><![CDATA[<h1>郁闷</h1><p>今天周六，公司附近基本上没有卖早餐的，不过今天看起来似乎比较幸运，竟然神奇的多了一家卖早鸡蛋灌饼的在地铁附近。为了早晨不挨饿就买了一个，但是不知道为什么，在去公司的路上我就一直感觉不太对，也一直在考虑只要再看到有一家卖早点的，我就把这个灌饼给丢掉。但是今天是周六嘛，我没有幸运的看到第二家卖早点的，只好将就一下了。<br>事情的发展是这样的，10点半吃完，到11点前就感觉不太对，我以为那是因为我还喝了格瓦斯，11点多出去抽烟，感觉更难受了，然后就去了厕所，先是拉肚子，然后出来又开始吐。中午吃饭时也感觉没有胃口，平时一碗面对我来说还略嫌不够，不过今天吃了连三分之一都不到就吃不下了，吃饭回来又接着吐。在拉肚子的时候任何一个屁都不值得相信，为了安全起见，又进了厕所，果然又是拉肚子，然后下午就由两个同事陪同去了医院急诊，拿了药回到家接着吐，然后睡觉，现在总算是好一些了。<br>这期间还有，从下午回来我就发现王爷是在家的，但是一直到我晚上起床都没听到他的动静，就打了电话给他，原来他老人家上吐下泄到今天凌晨4点，我勒个去的。<br>哦，还有，中日友好医院急诊内科的那个年轻女大夫很漂亮。</p><h1>Haskell变量类型</h1><h2>基本类型</h2><p>在Haskell中一切都是有类型的，如字符<code>Char</code>字符列表<code>[Char]</code>元组<code>(Int, Bool)</code>，数值类型有<code>Int</code>和<code>Integer</code>，其中<code>Int</code>受系统位数影响，比如64位系统，这种类型的范围就是-2-2…<sup>63到2</sup>63-1<code>Integer</code>类型则非常大，可以尝试一下<code>product [1..50]</code>。</p><a id="more"></a><h2>函数类型</h2><p>前面说到，Haskell的函数也是有类型的，在在hci<em>中输入<code>:t getChar</code>，返回是<code>getChar :: IO Char</code>，其含义是</em>getChar*这个函数返回一个<code>Char</code>类型数据（这个地方不太会解释）。<br>由于Haskell可以推断类型，很多情况下似乎可以不用特意声明类型，但是为了使程序更易读并易于编译器检查，我们还是应该在定义函数时，在函数前加上函数类型，如下：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">byThree</span> :: <span class="type">Int</span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">byThree</span> x = <span class="keyword">if</span> x `mod` <span class="number">3</span> == <span class="number">0</span></span><br><span class="line">            <span class="keyword">then</span> <span class="type">True</span></span><br><span class="line">            <span class="keyword">else</span> <span class="type">False</span></span><br></pre></td></tr></table></figure><p>例子中，第一行声明<code>byThree</code>这个函数接受一个<code>Int</code>型参数，返回一个<code>Bool</code>型值。</p><h2>类型变量</h2><p>记得在前两天刚开始学Haskell时，学到一个函数<code>maximum [1,2,3,4,2,5]</code>，这个函数接受一个列表做为参数，返回列表中最大的元素，来看一下这个函数的类型，<code>:t maximum</code>，返回为<code>maximum :: [a] -&gt; a</code>，哦，这是什么意思哪？是说这个函数接受一个<code>a</code>类型列表返回一个<code>a</code>类型数值吗？是的，不过在这里<code>a</code>不特指某一类型，而是可以为<code>Char</code>也可以是<code>Int</code>更可以是别的什么，这是一个变量，在这里就叫<em>类型变量</em>了，而使用<em>类型变量</em>指代参数类型的函数就可以叫做<em>多态函数</em>，这跟C++或Java的泛型有些相似。</p><p>当然，<code>a</code>既然只是一个变量，那我们也可以用其它名字代替，比如<code>b</code>。</p><p>还记得前面学元组时学到的两个函数吧<code>fst</code>和<code>snd</code>，看一下<code>:t fst</code>，返回<code>fst :: (a,b) -&gt; a</code>，其含义就是<code>fst</code>函数接受一个元组为参数，这个元组的第一个元素为<code>a</code>类型，第二个元素为<code>b</code>类型，该函数返回的数据类型与第一个元素相同，因为本函数返回的就是元组的第一个元素。再查看一下<code>:t snd</code>，返回<code>snd :: (a,b) -&gt; b</code>，其含义就显而易见了。</p><h1>结尾</h1><p>今天身体不舒服，就写到这里吧，现在已经11点28了，马上休息，希望明天身体装备能完全恢复，今天就暂停一天的学习，明天可以多学一些进行补偿。<br>另外，希望<a href="http://www.hector2.us" target="_blank" rel="noopener">王爷</a>的身体也尽快恢复健康。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;郁闷&lt;/h1&gt;
&lt;p&gt;今天周六，公司附近基本上没有卖早餐的，不过今天看起来似乎比较幸运，竟然神奇的多了一家卖早鸡蛋灌饼的在地铁附近。为了早晨不挨饿就买了一个，但是不知道为什么，在去公司的路上我就一直感觉不太对，也一直在考虑只要再看到有一家卖早点的，我就把这个灌饼给丢掉。但是今天是周六嘛，我没有幸运的看到第二家卖早点的，只好将就一下了。&lt;br&gt;
事情的发展是这样的，10点半吃完，到11点前就感觉不太对，我以为那是因为我还喝了格瓦斯，11点多出去抽烟，感觉更难受了，然后就去了厕所，先是拉肚子，然后出来又开始吐。中午吃饭时也感觉没有胃口，平时一碗面对我来说还略嫌不够，不过今天吃了连三分之一都不到就吃不下了，吃饭回来又接着吐。在拉肚子的时候任何一个屁都不值得相信，为了安全起见，又进了厕所，果然又是拉肚子，然后下午就由两个同事陪同去了医院急诊，拿了药回到家接着吐，然后睡觉，现在总算是好一些了。&lt;br&gt;
这期间还有，从下午回来我就发现王爷是在家的，但是一直到我晚上起床都没听到他的动静，就打了电话给他，原来他老人家上吐下泄到今天凌晨4点，我勒个去的。&lt;br&gt;
哦，还有，中日友好医院急诊内科的那个年轻女大夫很漂亮。&lt;/p&gt;
&lt;h1&gt;Haskell变量类型&lt;/h1&gt;
&lt;h2&gt;基本类型&lt;/h2&gt;
&lt;p&gt;在Haskell中一切都是有类型的，如字符&lt;code&gt;Char&lt;/code&gt;字符列表&lt;code&gt;[Char]&lt;/code&gt;元组&lt;code&gt;(Int, Bool)&lt;/code&gt;，数值类型有&lt;code&gt;Int&lt;/code&gt;和&lt;code&gt;Integer&lt;/code&gt;，其中&lt;code&gt;Int&lt;/code&gt;受系统位数影响，比如64位系统，这种类型的范围就是-2-2…&lt;sup&gt;63到2&lt;/sup&gt;63-1&lt;code&gt;Integer&lt;/code&gt;类型则非常大，可以尝试一下&lt;code&gt;product [1..50]&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="haskell" scheme="https://www.tobycn.org/categories/haskell/"/>
    
    
      <category term="functionally" scheme="https://www.tobycn.org/tags/functionally/"/>
    
      <category term="haskell" scheme="https://www.tobycn.org/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title>Start to learn Haskell 02</title>
    <link href="https://www.tobycn.org/2015/03/27/Start-to-learn-Haskell-02/"/>
    <id>https://www.tobycn.org/2015/03/27/Start-to-learn-Haskell-02/</id>
    <published>2015-03-27T09:34:53.000Z</published>
    <updated>2018-03-08T02:46:48.048Z</updated>
    
    <content type="html"><![CDATA[<h1>闲话</h1><p>昨天去了一趟医院，然后就回家休息了，顺便帮着解决一些工作的事，以为小伙伴们应该也会像往前一样十点多十一点那样就撤了，直到今天早晨才知道，他们昨天竟然一直工作到凌晨一点多，太辛苦了，可怜的孩子们，今天我也要一起加班，不知道几点能撤，不过我手上的事倒是做完了，可以写写博客什么的，估计今天晚上会回得比较晚，不知道有没有时间看书。</p><h1>元组(tuple)</h1><p>昨天就学了关于元组的一节，元组跟列表有些相似，使用圆括号声明，如<code>(1, &quot;Toby&quot;, &quot;M&quot;)</code>，通过这个语句已经可以看出其与列表的一些区别，列表中只能保存一种数据类型，而元组可以保存多种不同类型，所以，元组应该更适用于保存一组有意义的档案，每一个元组都可以当做数据表中的一条记录来使用。</p><p>那么，如果我们保存的一组数据都是相同的数据类型，比如一组二维坐标点<code>[[1,2], [2,3], 3,4]]</code>，这样看起来似乎不会有问题，列表中的每一个列表都是一个坐标，一切都是那么完美，可是一个意外出现了，某位连续加班一个星期的程序猿手一抖，这个就把这个列表写成了<code>[[1,2],[2,3,3],[3,4]]</code>，程序正常的完成了编译，于是就把程序放上了线，结果，程序无法按照这些坐标画出期望的线。如果使用元组进行定义会是怎样哪？同个个程序猿又犯了同样的错误，写出来这样一个元组的列表<code>[(1,2),(2,3,3),(3,4)]</code>，编译，出了错误提示，编译不通过，然后就直接按照错误提示找到出错的地方。</p><a id="more"></a><p>之所以出现这样的情况是跟Haskell对元组的定义及处理方式分不开的，在Haskell的元组的定义中，元素数量不同的元组，以及相同位置元素的数据类型不同，系统都会认为这些元组是不同的数据类型，于是放在要求所有元素数据类型必须一样的列表中就出了错。</p><p>元组内可以由不同数量不同数据类型的元素组成，其中有两个元素组成的元组叫做二元组，由三个元素组成的元组叫做三元组，以此类推，而二元组有一个特别的名字叫序对。</p><p>序对有两个专用的函数</p><ul><li><code>fst (1, &quot;ONE&quot;)</code> 返回序对的第一个元素</li><li><code>snd (1, &quot;ONE&quot;)</code> 返回序对的第二个元素</li></ul><p>另外，还有一个函数可以将两个列表交叉生成一个元组的列表</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">zip</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>, <span class="string">"five"</span>]</span><br></pre></td></tr></table></figure><p>本例会返回一个元组的列表<code>[(1,&quot;one&quot;),(2,&quot;two&quot;),(3,&quot;three&quot;),(4,&quot;four&quot;),(5,&quot;five&quot;)]</code>，由于Haskell的惰性，本例还可以写成如下方式</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">zip</span> [<span class="number">1</span>,<span class="number">2.</span>.] [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>, <span class="string">"five"</span>]</span><br></pre></td></tr></table></figure><p>输出与上例相同。<br>之所以出现这样的情况是因为，<code>zip</code>执行过程以较短的列表为准，而无限列表与定长的列表相比，当然是定长的列表较短。</p><h1>找一组三角形吧</h1><p>要求边长从1到10的直角三角形，首先要明确勾股定理，直角三角形的三条边的边长应该满足a^2 + b^2 = c^2，其中a为底边，c为斜边，b为另一条直角边，a和b都应该小于斜边c，再确定a不短于b，当然有b长于a时的情况，只不过这种情况只是a长于b换了一下摆放方向而已，所以我们可以得出下面的语句。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(a,b,c) | c &lt;- [<span class="number">1.</span><span class="number">.10</span>], a &lt;- [<span class="number">1.</span>.c], b &lt;- [<span class="number">1.</span>.a], a^<span class="number">2</span>+b^<span class="number">2</span>==c^<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>输出为<code>[(4,3,5),(8,6,10)]</code>，当然还可以加一些谓语过滤出更接近需求的组合。</p><h1>后记</h1><p>刚才有同事推荐了一个游戏，<a href="http://timelineapp.pointstone.org/coreball/game.html?openid=o3OtAuK--ELj5XEt3w22NGpb6Jv8&amp;from=timeline&amp;isappinstalled=0" target="_blank" rel="noopener">Core Ball</a>，我费半天劲玩到了第10关，然后就再也玩不下去了，看的眼都花了，然后我就推荐给了<a href="http://www.hector2.us" target="_blank" rel="noopener">王爷</a>，然后王爷成功的玩到了第20关，然后说想吐了，要去躺一会儿，哈哈哈哈。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;闲话&lt;/h1&gt;
&lt;p&gt;昨天去了一趟医院，然后就回家休息了，顺便帮着解决一些工作的事，以为小伙伴们应该也会像往前一样十点多十一点那样就撤了，直到今天早晨才知道，他们昨天竟然一直工作到凌晨一点多，太辛苦了，可怜的孩子们，今天我也要一起加班，不知道几点能撤，不过我手上的事倒是做完了，可以写写博客什么的，估计今天晚上会回得比较晚，不知道有没有时间看书。&lt;/p&gt;
&lt;h1&gt;元组(tuple)&lt;/h1&gt;
&lt;p&gt;昨天就学了关于元组的一节，元组跟列表有些相似，使用圆括号声明，如&lt;code&gt;(1, &amp;quot;Toby&amp;quot;, &amp;quot;M&amp;quot;)&lt;/code&gt;，通过这个语句已经可以看出其与列表的一些区别，列表中只能保存一种数据类型，而元组可以保存多种不同类型，所以，元组应该更适用于保存一组有意义的档案，每一个元组都可以当做数据表中的一条记录来使用。&lt;/p&gt;
&lt;p&gt;那么，如果我们保存的一组数据都是相同的数据类型，比如一组二维坐标点&lt;code&gt;[[1,2], [2,3], 3,4]]&lt;/code&gt;，这样看起来似乎不会有问题，列表中的每一个列表都是一个坐标，一切都是那么完美，可是一个意外出现了，某位连续加班一个星期的程序猿手一抖，这个就把这个列表写成了&lt;code&gt;[[1,2],[2,3,3],[3,4]]&lt;/code&gt;，程序正常的完成了编译，于是就把程序放上了线，结果，程序无法按照这些坐标画出期望的线。如果使用元组进行定义会是怎样哪？同个个程序猿又犯了同样的错误，写出来这样一个元组的列表&lt;code&gt;[(1,2),(2,3,3),(3,4)]&lt;/code&gt;，编译，出了错误提示，编译不通过，然后就直接按照错误提示找到出错的地方。&lt;/p&gt;
    
    </summary>
    
      <category term="haskell" scheme="https://www.tobycn.org/categories/haskell/"/>
    
    
      <category term="functionally" scheme="https://www.tobycn.org/tags/functionally/"/>
    
      <category term="haskell" scheme="https://www.tobycn.org/tags/haskell/"/>
    
      <category term="tuple" scheme="https://www.tobycn.org/tags/tuple/"/>
    
  </entry>
  
  <entry>
    <title>Start to learn Haskell 01</title>
    <link href="https://www.tobycn.org/2015/03/26/Start-to-learn-Haskell-01/"/>
    <id>https://www.tobycn.org/2015/03/26/Start-to-learn-Haskell-01/</id>
    <published>2015-03-26T04:26:33.000Z</published>
    <updated>2018-03-08T02:46:48.048Z</updated>
    
    <content type="html"><![CDATA[<h1>惯例闲话</h1><p>昨天加班到比较晚，回家后基本上就11点多了，洗漱完毕基本上也就十二点了，不过还是坚持了一下，看了几页书，今天再接着写写。这次学的主要内容就是部分列表相关的操作，和区间以及列表推导式。由于每次都是睡觉前看上几页书并测试一下代码第二天才写BLOG，所以可能难免有些错误和遗漏，但是我仍然认为这样做是合理的，经过一段时间的理解和遗忘再加上回忆并记录下来，这可能更有利于掌握吧。</p><h1>列表函数</h1><ul><li><code>null [1,2,3]</code> 检查列表是否为空，返回<code>True</code>或<code>False</code></li><li><code>take 2 [1,2,3]</code> 获取前n个元素组成的列表，当n为0时返回空列表，当n大于列表长度时返回整个列表</li><li><code>drop 2 [1,2,3]</code> 删除前n个元素，并返回剩余元素组成的列表，当n等于0时返回整个列表，当n大于列表长度时返回空</li><li><code>maximum [1,4,7,3,6]</code> 返回列表中最大的元素</li><li><code>minimum [1,4,7,3,6]</code> 返回列表中最小的元素</li><li><code>sum [3,6,9]</code> 对列表中的元素进行求和</li><li><code>product [3,6,9]</code> 对列表中的元素求积</li><li><code>elem 3 [5,4,3,2,1]</code> 检查给定数据是否为列表中的元素，返回<code>True</code>或<code>False</code></li></ul><h1>区间</h1><h2>简单区间</h2><p>所谓区间，实际上是利用列表元素的规律以简单的方式生成较大列表的一种方法。例如，按之间所学习的，如果要定义一个从1到10所有整数的列表，就需要这样<code>[1,2,3,4,5,6,7,8,9,10]</code>，但是如果使用区间则可以简化成<code>[1..10]</code>，当然了，如果要生成字母A-Z的列表，同样可以使用类似的方法<code>['A'..'Z']</code>。</p><a id="more"></a><h2>自定义步长的区间</h2><p>我们当然不可能只使用这种简单的+1+1+1的列表，可能我们还需要+2+2或+3+3这样的列表，那么，这样需要更改步长的区间的需求如何利用Haskell的区间生成哪，其实也很简单，确定列表最前面的两个连续元素，然后在<code>..</code>的后面加上最大值或最小值对列表进行限制，如<code>[2,5..10]</code>，这样就定义了一个<code>[2,5,8]</code>这样的列表，由2和5决定了本列表的步长，由10限制了列表的最大值。</p><h2>递减区间</h2><p>上面的所有示例都是递增的区间，递减的区间实现方法跟上面的示例非常相似，比如，<code>[10,9..1]</code>，需要特别注意的一点是，递减的区别不能用类似<code>[10..1]</code>这样的方式定义，因为在不没有步长因素的情况下，Haskell会认为这是递增区别，从10开始递增元素并寻找不大于1的元素，这当然是找不到的，所以用<code>[10..1]</code>定义的列表是个空列表。</p><h2>无限列表</h2><p>关于区间，我学到的最后的部分是关于无限列表的内容，所谓无限列表即是这个列表中的元素是无穷尽的，比如<code>[1,2..]</code>，这就是一个无限列表，它的元素就是从1开始，一直递增，没有终点。当然，无需对这个列表是否会占用太多计算机资源担心，Haskell是惰性语言，表达式就在那里，你不使用的时候它就是一个表达式，而当要使用这个列表时，系统才对其进行计算，比如<code>take 10 [1,5..]</code>，由于此表达式只是从无限列表中取10个元素出来，所以，系统只会计算到第10个元素即终止。</p><p>几个常见操作无限列表的方法</p><ul><li><code>cycle [1,2,3]</code> 无限循环列表</li><li><code>repeat 5</code> 生成只有参数组成的无限列表</li><li><code>replicate 5 10</code> 本语句生成的不是无限列表，而是由5个10组成的列表，与上一条有点相似，只不过上一条是无限列表，大多数时候可用本语句。</li></ul><h1>列表推导式</h1><p>不管是直接定义简单的列表或是用区间生成列表，现在看来都过于简单，也许还需要更复杂的列表生成规则，于是现在就用到了列表推导式，列表推导式可以由一个简单的列表进行过滤或计算生成一个更适用的列表。<br>先来个简单的</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x * <span class="number">2</span> | x &lt;- [<span class="number">1.</span><span class="number">.10</span>]]</span><br></pre></td></tr></table></figure><p>其中，<code>|</code>前面是要输出元素，后面是导入的列表，此表达式会将列表<code>[1..10]</code>中的每一个元素赋值给x传递到输出部分进行计算。还可以再给本推导式增加一个谓语，以对输出的元素进行过滤，如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x * <span class="number">2</span> | x &lt;- [<span class="number">1.</span><span class="number">.10</span>], odd x]</span><br></pre></td></tr></table></figure><p>其中<code>odd x</code>是对x进行判断，如为奇数返回<code>True</code>，否则返回<code>False</code>，因此，以上推导式只会将奇数传递到输出部分进行计算。在Haskell的列表推导式中是可以增加多个谓语的，所以，还可以有如下的示例：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x * <span class="number">2</span> | x &lt;- [<span class="number">1.</span><span class="number">.10</span>], odd x, x &gt;= <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>此示例又在前面的基础上限制了x必须大于等于5，除此之外，还可以在谓语中还可以使用自定义的函数，唯一的要求就是函数需要返回<code>True</code>或<code>False</code>，如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">byThree</span> x = <span class="keyword">if</span> x `mod` <span class="number">3</span> == <span class="number">0</span></span><br><span class="line">            <span class="keyword">then</span> <span class="type">True</span></span><br><span class="line">            <span class="keyword">else</span> <span class="type">False</span></span><br><span class="line">[x * <span class="number">2</span> | x &lt;- [<span class="number">1.</span><span class="number">.10</span>], byThree x]</span><br></pre></td></tr></table></figure><p>本示例使用了自定义的过滤函数<code>byThree</code>，只使用能被3整除了元素。<br>除了在增加谓语对元素进行过滤外，还可以在输出中对数据进行整理，如</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="keyword">if</span> x*<span class="number">2</span> &lt; <span class="number">15</span> <span class="keyword">then</span> <span class="string">"Big"</span> <span class="keyword">else</span> <span class="string">"Bang"</span> | x &lt;- [<span class="number">1.</span><span class="number">.10</span>], byThree x]</span><br></pre></td></tr></table></figure><p>另外，推导式还可以支持多个输入，如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ x + y | x &lt;- [<span class="number">1.</span><span class="number">.10</span>], y &lt;- [<span class="number">11.</span><span class="number">.20</span>]]</span><br></pre></td></tr></table></figure><p>此表达式将输出一个对两个列表中的每个元素分别相加的列表，至于输出结果，因为比较长，写出来太难看，所以就免了。</p><p>此外，输入的列表还可以是列表的列表，在这里就不详细说了。</p><h1>结尾</h1><p>本来感觉昨天只看了不到半个小时的书，可写的内容应该没有多少的，结果万万没想到，竟然也让我罗嗦的那么半天，不过似乎还挺有意思的。<br>今天下午4点去了一趟医院，看时间也不算早，再加上最近一段时间一直加班，今天就偷懒一下，早点回家休息休息，希望加班的兄弟们不要羡慕。<br>因为今天回来的比较早，<a href="http://www.hector2.us/" target="_blank" rel="noopener">王爷</a>看到我好开心的样子，哈哈，这一个人在家里学习工作是有多寂寞啊，据王爷说最近一段时间，虽然合租在一套房子里，每天跟我的交流就是听到我打呼噜的节奏，不要误会，我俩不是住在同一个房间里，只不过是房间中间就隔了一堵墙。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;惯例闲话&lt;/h1&gt;
&lt;p&gt;昨天加班到比较晚，回家后基本上就11点多了，洗漱完毕基本上也就十二点了，不过还是坚持了一下，看了几页书，今天再接着写写。这次学的主要内容就是部分列表相关的操作，和区间以及列表推导式。由于每次都是睡觉前看上几页书并测试一下代码第二天才写BLOG，所以可能难免有些错误和遗漏，但是我仍然认为这样做是合理的，经过一段时间的理解和遗忘再加上回忆并记录下来，这可能更有利于掌握吧。&lt;/p&gt;
&lt;h1&gt;列表函数&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;null [1,2,3]&lt;/code&gt; 检查列表是否为空，返回&lt;code&gt;True&lt;/code&gt;或&lt;code&gt;False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;take 2 [1,2,3]&lt;/code&gt; 获取前n个元素组成的列表，当n为0时返回空列表，当n大于列表长度时返回整个列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drop 2 [1,2,3]&lt;/code&gt; 删除前n个元素，并返回剩余元素组成的列表，当n等于0时返回整个列表，当n大于列表长度时返回空&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maximum [1,4,7,3,6]&lt;/code&gt; 返回列表中最大的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minimum [1,4,7,3,6]&lt;/code&gt; 返回列表中最小的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum [3,6,9]&lt;/code&gt; 对列表中的元素进行求和&lt;/li&gt;
&lt;li&gt;&lt;code&gt;product [3,6,9]&lt;/code&gt; 对列表中的元素求积&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem 3 [5,4,3,2,1]&lt;/code&gt; 检查给定数据是否为列表中的元素，返回&lt;code&gt;True&lt;/code&gt;或&lt;code&gt;False&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;区间&lt;/h1&gt;
&lt;h2&gt;简单区间&lt;/h2&gt;
&lt;p&gt;所谓区间，实际上是利用列表元素的规律以简单的方式生成较大列表的一种方法。例如，按之间所学习的，如果要定义一个从1到10所有整数的列表，就需要这样&lt;code&gt;[1,2,3,4,5,6,7,8,9,10]&lt;/code&gt;，但是如果使用区间则可以简化成&lt;code&gt;[1..10]&lt;/code&gt;，当然了，如果要生成字母A-Z的列表，同样可以使用类似的方法&lt;code&gt;[&#39;A&#39;..&#39;Z&#39;]&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="haskell" scheme="https://www.tobycn.org/categories/haskell/"/>
    
    
      <category term="lisp" scheme="https://www.tobycn.org/tags/lisp/"/>
    
      <category term="functionally" scheme="https://www.tobycn.org/tags/functionally/"/>
    
      <category term="haskell" scheme="https://www.tobycn.org/tags/haskell/"/>
    
      <category term="range" scheme="https://www.tobycn.org/tags/range/"/>
    
  </entry>
  
  <entry>
    <title>Start to learn Haskell 00</title>
    <link href="https://www.tobycn.org/2015/03/24/Start-to-learn-Haskell-00/"/>
    <id>https://www.tobycn.org/2015/03/24/Start-to-learn-Haskell-00/</id>
    <published>2015-03-24T15:45:52.000Z</published>
    <updated>2015-03-25T13:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>闲话几句</h1><p>很丢人，说好的开始写千字文的，但是因为工作原因，最近太忙，每天回到家里都已经很晚了，也就没有胆量开始写一篇文章，一是因为开始写之前需要思考，整理要写的内容，这些都需要花时间，而这会导致的后果就是睡得太晚，影响第二天的工作；二是因为一时间实在想不出要写什么，每天的工作生活千篇一律，工作就是写代码讨论解决方案，然后就是抽一点时间去吃饭，而且吃饭的花样都没什么太大的变化，然后其它的时间都是在上班或回家的路上。所以为了便于坚持，也为了增加点什么，打算现在今天开始学Haskell，然后把学习的过程整理出来，这也算是坚持写作了，然后再在偶尔有灵感的时候写点技术之外的感悟啊之类的，既然不能产出高质量的思想，那就整点也许对一些人有用的干货吧。</p><h1>关于Haskell</h1><p>话说Haskell是一种函数式语言，在此之前我接触过Common Lisp，而在我的印象中，属于函数式语言的也只有Lisp及其各种方言，如Clojure、Scheme。当然也曾听说过Haskell语言，不过当时对于这属于哪种类型的语言并不明确，在来到新公司之后，由一同事推荐之后才对这门语言产生了兴趣。</p><p>函数式语言对于我的意义，我想更多的应该是在于可以改变一下对于程序的思路，或许换个角度看问题，难题可能也就变成了随手可解的题目了吧。当然，如果能用这语言解决一些实际工作中的问题那就更好了。</p><a id="more"></a><h1>开始学习</h1><h2>函数</h2><p>在Haskell中函数应当由简单小巧的语句组成，简单的逻辑可以尽可能的确保函数无误，然后再由这些小的函数组成一个可以完成完整功能的小函数，这应该是所有函数式语言遵循的原则吧，接受参数并返回处理后结果数据，参数不改变。<br>下面定义一个简单的函数</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">maxNum</span> a b = <span class="keyword">if</span> a &gt; b</span><br><span class="line">             <span class="keyword">then</span> a</span><br><span class="line">             <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure><p>如上代码<code>maxNum</code>是函数名，a b是参数，代码简单到不需要进行任何说明，而这也应该是在函数式语言中常见的方法。<br>在调用时只需要像这样<code>maxNum 15 16</code>调用函数，像这种类型的函数在Haskell叫做前缀式函数，顾名思义，就是指函数名在前，参数在后调用。有了<strong>前缀函数</strong>自然也就会有其它类型的函数，目前我知道的有<strong>中缀函数</strong>，即函数在两个参数之间，比如像这样<code>10 + 12</code>，这中间<code>+</code>就是函数，看起来很奇怪吧，但是也还可以接受，在Lisp中<code>(+ 10 12)</code>，其实也是属于类似的用法。<br>另外，可以通过在函数两边使用反引号包围的方法使前缀函数成为中缀函数使用。<br>还有，函数名中可以存在<code>'</code>符号，一般用在区分分别较小的不同函数，如<code>doubleNum</code>和<code>doubleNum'</code>。</p><h2>比较及IF</h2><p>Haskell的比较运算我目前了解了这么几个，==、&gt;、&gt;=、&lt;=、&lt;、/=，这里需要注意的是/=，与其它语言明显不同的地方，/=是不等于，这不同于其它语言用!=做为不等于。另外一个需要注意的地方是if，在Haskell中<code>if .. then .. else</code>必须三者同时存在。</p><h2>列表</h2><p>对于列表，定义方法是<code>alist = [1,2,3,4,5]</code>，合并列表的方法是++，这与其它语言也是完全不一样的，用++合并列表是一种非常低效的操作，在合并之前，此操作会遍历左操作数，比如<code>[1,2,3,4,5] ++ [6,7,8,9,20]</code>，此操作会先遍历<code>[1,2,3,4,5]</code>，然后再合并<code>[6,7,8,9,10]</code>。</p><p>当添加新的元素加入列表时，可以用<code>:</code>操作，如<code>9:[1,2,3,4,5]</code>，这种操作非常快，但是需要注意的是，要加入的元素必须与列表中原有元素类型相同，否则会报错。可以做如下总结，Haskell的列表中只能保存相同类型的元素，比如<code>[1,2,3,4,5]</code>、<code>['a','b']</code>、<code>[[1,2], [3,4]]</code>等。</p><p>再另外，在Haskell中的字符串其实是字符列表的语法糖，如<code>&quot;hello&quot;</code>等价于<code>['h','e','l','l','o']</code>也与<code>'h':'e':'l':'l':'o':[]</code>相同。</p><p>列表的读取</p><ul><li><code>length alist</code> 获取列表长度</li><li><code>alist!!0</code> 读取列表第一个元素，其中<strong>0</strong>是要读取元素的索引</li><li><code>head alist</code> 读取列表第一个元素</li><li><code>tail alist</code> 读取列表除第一个之外所有元素</li><li><code>last alist</code> 读取列表最后一个元素</li><li><code>init alist</code> 读取列表除最后一个外的所有元素</li><li><code>reverse alist</code> 反转列表元素</li></ul><h1>结束</h1><p>没想到咱这老胳膊老腿的竟然还是很灵活敏捷的，刚才在倒水的时候发生的一件事，茶壶和杯子都在我的左边，我有常用的有两个杯子，一个用来泡茶一个用来盛温开水睡前喝，这两个杯子中间有个空隙，我一般拿水壶都是从这个空隙拿出来，就在我用左手拿水壶准备倒水泡茶，在通过那个空隙时不小心碰到了外侧那个盛温开水的杯子，就在那个杯子完全脱离桌面往掉的一瞬间，我空着的右手以迅雷不及掩耳盗铃儿响叮当之势从右侧瞬间移动到最左侧稳稳的抓住了那个半空中的杯子，那一瞬间我似乎听到了利器快速划破空气的声音，嘿嘿嘿嘿，宝刀未老啊，虽然之后感觉到头不太舒服，但是还是有点小得意哦，哈哈哈。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;闲话几句&lt;/h1&gt;
&lt;p&gt;很丢人，说好的开始写千字文的，但是因为工作原因，最近太忙，每天回到家里都已经很晚了，也就没有胆量开始写一篇文章，一是因为开始写之前需要思考，整理要写的内容，这些都需要花时间，而这会导致的后果就是睡得太晚，影响第二天的工作；二是因为一时间实在想不出要写什么，每天的工作生活千篇一律，工作就是写代码讨论解决方案，然后就是抽一点时间去吃饭，而且吃饭的花样都没什么太大的变化，然后其它的时间都是在上班或回家的路上。所以为了便于坚持，也为了增加点什么，打算现在今天开始学Haskell，然后把学习的过程整理出来，这也算是坚持写作了，然后再在偶尔有灵感的时候写点技术之外的感悟啊之类的，既然不能产出高质量的思想，那就整点也许对一些人有用的干货吧。&lt;/p&gt;
&lt;h1&gt;关于Haskell&lt;/h1&gt;
&lt;p&gt;话说Haskell是一种函数式语言，在此之前我接触过Common Lisp，而在我的印象中，属于函数式语言的也只有Lisp及其各种方言，如Clojure、Scheme。当然也曾听说过Haskell语言，不过当时对于这属于哪种类型的语言并不明确，在来到新公司之后，由一同事推荐之后才对这门语言产生了兴趣。&lt;/p&gt;
&lt;p&gt;函数式语言对于我的意义，我想更多的应该是在于可以改变一下对于程序的思路，或许换个角度看问题，难题可能也就变成了随手可解的题目了吧。当然，如果能用这语言解决一些实际工作中的问题那就更好了。&lt;/p&gt;
    
    </summary>
    
      <category term="haskell" scheme="https://www.tobycn.org/categories/haskell/"/>
    
    
      <category term="functionally" scheme="https://www.tobycn.org/tags/functionally/"/>
    
      <category term="haskell" scheme="https://www.tobycn.org/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title>关于阅读和买书</title>
    <link href="https://www.tobycn.org/2015/03/13/About-Reading-and-buy-books/"/>
    <id>https://www.tobycn.org/2015/03/13/About-Reading-and-buy-books/</id>
    <published>2015-03-13T11:26:50.000Z</published>
    <updated>2018-03-08T02:46:48.045Z</updated>
    
    <content type="html"><![CDATA[<h2>闲话几句</h2><p>最近在<a href="http://jianshu.io" target="_blank" rel="noopener">简书</a>上读了几篇关于写作和文章，其中有谈到关于如何提高写作能力的训练方法，其中有提到最重要的还是多写，于是在上面又看到了那篇译作《每天一篇千字文》。</p><p>这要说起来，写出千字的文章难度并不算大，但是每天写出一篇来这就很有挑战性了。我觉得，要是只是每天写出一篇千字文也许是可以凑出来，不就是千字吗，光写每天的流水帐也差不多可以整得差不多了，但是这样的文章写出来有意义吗？之所以写文章，要么就是表达思想、价值观，要么输出知识，如果只是每天千篇一律的生活流水帐，那还真不如不写。所以，每天一篇千字文的最大难度应该是每天能输出有价值的东西，这才是难度所在。</p><p>事物总是有两面的，回过头再想想，如果我真的能坚持这么写下去，总有一天，现有的知识会输出光，这时候为了坚持下去，会不会促使我去学习吸收新的知识哪？</p><a id="more"></a><h2>关于阅读</h2><p>我自认为是一个爱读书的人，前几年读书基本上都是专业相关的技术类书籍，不过最近两年受王爷影响，开始读一些其它方面的书，比如人文类及国内外的一些小说。哦，对了，还有网络小说（如果这算是书的话），当然了在我内心中，看网络小说多半是为了消磨时间，能够吸收到的养分有限。</p><p>驱动人做事的原因多半是人的欲望或是需求，我想在更好的工作，那么就要有更突出的特长。我的工作是软件开发，那么如果不想被淘汰，我就要比同行更强大，所以，一旦有时间我就会去学更多的知识。与人交流可以更易于发现自身的问题缺陷，但是阅读特别是系统化的阅读绝对是打实基础提升内涵的不二选择，因此，我用碎片时间在穿梭于网络上不同的BLOG之间，学习他人整理出来的知识，这些知识多半是针对于某单一问题提供实用的解决方案或思路，这些更有益于快速解决问题，并对系统阅读提供线索。而稍整块的时间我则会用来读书，以书为载体出现的知识总是经过系统化的，即便再烂的书，那也是一个整体，所以，读书虽然要挑着看，但是如果刚好就只有这一本书，又是非读不可的，那怎么办哪？我的做法是，就当是挑错吧，当把书里的错误都挑出来，谁又能否认这是一种巨大的收获哪？所以古人才会说『尽信书不如无书』。</p><p>我读书也基本上不太挑，各个方面的书都会有所涉猎。像之前只看技术类书籍的阶段，不管是针对某种程序语言的还是编程方法论、算法等，我都会看，同时还会涉及到系统底层、数据库理论等，也许看了这些书对于当前的工作没有什么好处，但是不可否认的是，这些知识对我有着潜移默化的影响，这些影响体现在看问题的角度深度，更容易整体考虑问题，也更容易发现问题的深层原因，对于现在编程语言脚本化的年代，这些知识可以帮助理解这些脚本语言只所以做出这种设计的原因，在处理问题特别是效率问题时，你会发现，你能做得比只了解这种语言自身的人更驾轻就熟。</p><p>目前除了技术类阅读，我有意识的增加了非技术类的阅读量，比如小说，王爷推荐了很多小说给我。我以前对于纸载的小说并不是很感兴趣，当然，少年时期金庸古龙我是全部看过一遍以上的了。那时候对于小说，我关注更多的是情节本身以及主人公的命运、抗争以及崛起啊之类的，并且时不时会幻想，如果我是主角那会是怎样哪？而现在读小说则是几乎完全不一样的感觉了，也许是年龄的关系，现在看小说会更多的关心故事的背后的内容，事件的成因及社会背景等。可以说，一本好的小说能传递的不仅仅是故事本身，而更多的是，它在讲一段历史请一种文化，我想这应该是小说能带来的最大价值吧。</p><p>最近我又开始读跟中国传统文化相关的书，比如相关的五行、阴阳能学说，你可以不信，甚至说这是迷信，但是我相信，则大有收获，万事万物有阴阳两面，万事万物都处于影响与被影响的链条当中，这是在用形象的方法讲哲学。除此之外，我还在看中医相关的书，看得越多越觉得中医的科学性及人性。最近又买了一套【黄帝内经】，准备好好研究一下，看看能有什么收获，同时购入了还有一套【史记】，希望能有时间读完。</p><h2>关于买书</h2><p>我不光喜欢读书，还喜欢买书。年幼时，手上没有钱，就读家中年长者用过的书，比如老叔和姑读大学时的一些大学语文，比如老姐读大学时的心理学方面的教材，这些书我都读过了N遍，后来能有一些零花钱时就攒下来买书，比如【水浒传】、【西游记】，这些都是那个时期用零花钱买来读的，大概是小学三四五年级时，那时候最喜欢去的地方是「新华书店」、「市中区图书馆」，都是可以免费读书的地方。</p><p>等到成年，开始工作之后，就开始养成了大量买书的习惯，这也许是因为小时候没办法把喜欢的书收入囊中的原因吧，我对书有着强烈的占有欲，不光在网络或书店买纸版书，我还同时买了Kindle设备，从Kindle Touch到Paper White，我买了很多电子版的书，有时候在买了纸质版后还会买电子版，或者反之，有不少书我有两个版本，电子版是为了携带方便，而纸质版是因为我太喜欢这些书了，我喜欢拿在手上，嗅着书上的油墨香味。</p><p>大量的买书也让我有了负罪感，因为时间关系，很多书虽然买到手，但是并没有时间去读，我粗略估计一下，我的所有藏书中大概只有六成左右是真正读过的，其它的还在等着我拿起翻开。我希望后面一段时间可以减少或不买书，直到我把手上的书全部读完再说。</p><p>有一句话说的真对，『书非借不能读也』，这大概是因为借到的书总是想着要还回去，必须抓紧时间读完，而属于自己的书，总觉得还有大把的时间，等等再看也来得及，结果就是拖延症发作，那书则是默默的蒙上了一层浮尘。</p><h2>结尾</h2><p>写到这里，这篇文章也算是写完了，在开头之所以写了每天一篇千字文的事，其实我被那篇文章所影响，想试着开始我的千字文之旅，我想这可以算是我的一个开始吧，我不准备每天都写一篇，但是我想，至少每周要写五篇吧，不限内容题材，看看我能坚持多久吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;闲话几句&lt;/h2&gt;
&lt;p&gt;最近在&lt;a href=&quot;http://jianshu.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;上读了几篇关于写作和文章，其中有谈到关于如何提高写作能力的训练方法，其中有提到最重要的还是多写，于是在上面又看到了那篇译作《每天一篇千字文》。&lt;/p&gt;
&lt;p&gt;这要说起来，写出千字的文章难度并不算大，但是每天写出一篇来这就很有挑战性了。我觉得，要是只是每天写出一篇千字文也许是可以凑出来，不就是千字吗，光写每天的流水帐也差不多可以整得差不多了，但是这样的文章写出来有意义吗？之所以写文章，要么就是表达思想、价值观，要么输出知识，如果只是每天千篇一律的生活流水帐，那还真不如不写。所以，每天一篇千字文的最大难度应该是每天能输出有价值的东西，这才是难度所在。&lt;/p&gt;
&lt;p&gt;事物总是有两面的，回过头再想想，如果我真的能坚持这么写下去，总有一天，现有的知识会输出光，这时候为了坚持下去，会不会促使我去学习吸收新的知识哪？&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://www.tobycn.org/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>最终还是没忍住HHKB的诱惑</title>
    <link href="https://www.tobycn.org/2015/02/28/My-HHKB-was-coming/"/>
    <id>https://www.tobycn.org/2015/02/28/My-HHKB-was-coming/</id>
    <published>2015-02-28T15:25:26.000Z</published>
    <updated>2018-03-08T02:46:48.047Z</updated>
    
    <content type="html"><![CDATA[<p>刚打开BLOG看了一下，发现上次发文已经是N个月之前的事了，实在是不应该啊，这次趁着新键盘到手的契机，顺便写写最近的一些情况以庆祝。</p><h2>上一份工作</h2><p>为什么说是上一份工作哪？原因是，我换工作了，这应该是持续时间最短的一份工作了。</p><p>现在想来，上一份工作似乎没做多少事，从3月份到11月份，八个月的时间，真正由我来做的其实就只有两件事，而其中一件还只是进行了设计以及初步的定义相关的编码。</p><p>首先是队列系统，主要是用来解决高并发状态时的压力问题，这个项目通过在世界杯项目中的使用，基本上证实了思路的正确，并且在使用中也确实是起到了非常明显的作用，实现了设计目标。</p><p>然后是一个数据层系统，设计中这个数据层会解决数据的持久化及缓存的管理及合并，并且向下游用户提供良好的使用接口，实现MySQL协议以降低现有系统数据的迁移难度，就我看来，这个设计是合适的，但是由于公司内部的一些变动，没办法让我把精力放在这个系统的开发上，然后，就没再坚持下去。</p><h2>新工作</h2><p>现在的这份工作是在朋友创业公司，这朋友还是王爷介绍认识的（能认识王爷以及几个新朋友是我这次回北京最大的收获），现在是接着做游戏后端相关的工作。</p><p>目前来看，现在的工作对我来说又是一个巨大的收获。在项目开始时我就有幸参与进来了，因为时间足够，在后端的设计初期花了大量的时间进行系统的设计，这些设计目前来说还是比较合理的，至少使后期的开发工作极其的便利，关于项目的设计部分以后再专门讨论。</p><p>现在这个游戏项目已经到了后期，目前处于跟发行商谈判以及根据发行商要求进行修改的阶段，再有两个月左右的时间应该就可以跟大家见面。</p><h2>键盘</h2><p>虽然早就对机械键盘有所了解，但是真正接触的时间并不长，先是用了一把CHERRY的茶轴，然后在对HHKB进行了大量的了解之后，实在没忍住就入了一把，虽然价格上贵了些，拿到手上就对其爱不释手了，这篇博客就是用这个键盘写的第一篇文章，用到现在我只有一个感觉，那就是舒服。</p><p>现在看来我真是不会细节描写，除了说舒服我就找不出更合适的词来形容这个键盘了。</p><p>在买这个键盘之前我还担心不适应其独特的键盘布局，但是现在看来这个担心是完全没有必要了。原因应该有那么三个吧，一、我把2、3跳线打开了，其它都是默认的，2号是把键盘设置成Mac模式，3号是把BACKSPACE切换成习惯的方式，其它的跟用普通键盘没啥区别。二、我用习惯了Mac，用CTRL配合光标移动对我来说也很熟悉，再加上vi/emacs对我来说更是最常用的编辑器。三、没了。</p><p>最后，对于程序员来说，我觉得HHKB确实是值得拥有的一把利器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚打开BLOG看了一下，发现上次发文已经是N个月之前的事了，实在是不应该啊，这次趁着新键盘到手的契机，顺便写写最近的一些情况以庆祝。&lt;/p&gt;
&lt;h2&gt;上一份工作&lt;/h2&gt;
&lt;p&gt;为什么说是上一份工作哪？原因是，我换工作了，这应该是持续时间最短的一份工作了。&lt;/p&gt;
&lt;p&gt;现
      
    
    </summary>
    
    
      <category term="hhkb" scheme="https://www.tobycn.org/tags/hhkb/"/>
    
  </entry>
  
  <entry>
    <title>繁忙时代</title>
    <link href="https://www.tobycn.org/2014/08/13/Busy-Times/"/>
    <id>https://www.tobycn.org/2014/08/13/Busy-Times/</id>
    <published>2014-08-13T14:53:11.000Z</published>
    <updated>2018-03-08T02:46:48.046Z</updated>
    
    <content type="html"><![CDATA[<h2>繁忙时代前言</h2><p>从进入三月份进入新公司，一直到现在，刚看了一下日期，竟然刚好是13号，整整五个月的时间。现在想来，这五个月的时间我自己做起来的项目应该说只有一个半，但是这一个半项目贯穿了公司里多个项目多个部分，毕竟做的是基础开发，这也是必然的吧。</p><p>当然了，之所以说繁忙，主要还是因为除了工作我还做了不少其它的事，总之，这段时间我把时间安排的非常紧凑，尽管很忙，但是这也让我过得很充实，下面尽量简单的记一个流水帐。</p><a id="more"></a><h2>繁忙的世界杯项目</h2><p>首先来说，我加入新公司主要是为了做新媒体项目的高并发相关的开发，项目的定位也是一个平台级的新媒体互动项目。项目的开始并不是为了世界杯，但是当项目基本上做起来被应用于NWC大会，于是，后面被关注程度就超出了预期。</p><p>在与CCTV5确定了合作世界杯相关节目后，我们的繁忙就开始了。首先是紧张的封闭开发，这段时间的开发成果当然是斐然的，而我做为就对高并发需求的关键一环压力自然很大。</p><p>在短短三个星期的时间内，任务分发系统（队列系统，主要用来做任务分发，对任务进行异步化以养活阻塞压力）完成了从设计到编码直到出BETA版的所有工作，尽管由于时间的关系，在开发过程中对设计在不影响架构的情况化进行了简化，但是，毕竟在短短三周的时间完成一个可用的系统并不是轻松的事，项目全部是用C语言从零开始构建，我想做C语言开发的兄弟们应该是可以体会到其中艰辛的。</p><p>在对BETA版进行一定程度的测试优化后就发布了第一个较为稳定版本，然后直接插入到整个系统中，虽然我是整天都提心吊胆的，但是好在整个世界杯期间，这个分发系统除了因为网络问题崩溃过一次之外没再掉过链子，这多少让我感到稍许欣慰，不过尽管基本没出过问题，我还是要每天盯到晚上两点多才能上床睡觉，连续一个月的时间，结果导致身体很多地方感觉颇为不适，不过总的来说身体状态相当不错，其原因应该归结到这期间开始的健身计划。</p><h2>繁忙的健身计划</h2><p>健身计划的开始也是被老婆鼓励、鼓动、诱惑之后才开始的。</p><p>因为我一直以来都太胖，健康问题一直都存在，只不过之前还不够重视，从2013年10月份就一直在吃降压药，当时血压高的很恐怖。而这次健身计划的实话本意就是改善身体状态，能让身体重新回归健康，当然，如果能减掉体重就更好了。</p><p>我印象中，健身计划开始于5月21号，在健身房办了会员卡，然后又请了私人教练。之所以请私教是因为之前也不是没去过健身房，但是都没能坚持下来，我希望通过请私教能让我有更多坚持的理由，而且有个人提醒和指导肯定会更有用处。</p><p>从健身计划开始，我基本上每天晚上都会去健身房锻炼近两个小时，有时是完全自己锻炼，主要是有氧为主，辅以力量训练，每周上四节健身课，上健身课时由教练指导对身体特定肌肉进行训练，这期间成果非常明显，锻炼满一个月时又做了一次体脂测试，脂肪减少了8KG，肌肉增加了近1.5KG，基本上体重减了15斤左右，感觉身体状态好了很多，降压药也减少了四分之三的份量，这让我很有成就感。</p><p>整个健身计划是贯穿了整个世界杯项目的，随着世界杯的结束，我也终于可以轻松下来了，公司为了让我们能调整状态，给世界杯项目的参与者安排了休假，于是也使我终于能达成N久以来的心愿，能带孩子回家见见家里的老人。</p><p>但是也正是因为休假使我的健身计划中断了一段时间。</p><h2>繁忙的休假</h2><p>说到休假，其实之前是没有想到的，当时的准备是能趁周末回一次广西，带老婆孩子回到北京后先让他们娘俩自己玩几天，我先上班到周四，然后再请假周五和下一个周一的两天假，然后再带他们回山东的，公司能给放三天假使我的时间更为充足。</p><p>回到北京后，放弃了跟参与项目的同事一起拓展的机会，这使我又多出了两天时间，于是干脆就车票改签，比原计划提前一天回了山东。</p><p>在路上一天，到家后，短暂的休息了一天，然后第三天去了姥姥家，也让姥姥得以享受一下四世同堂的幸福。说起来这也是很遗憾的事，姥爷去世的早，姥爷去世时我还在读高中，他没能见到我成年、工作以及以后的生活，爷爷是在我开始工作后去世，然后在两年后奶奶去世，他们都没能见到我结婚生子，这对我来说是非常遗憾的事，所以，我希望我家里人都能尽早的见到我的老婆孩子。</p><p>在姥姥家呆了一天，然后又回自己家，休息一天就接着就去了枣庄，那是我读书、长大的地方，我人生中最重要或者说是最印象最深刻的事基本都是在那里发生的。</p><p>到枣庄时已经是下午六点多了，然后是叔叔请我们一家人吃饭，吃过饭去他家呆了一会儿，因为是要住在老姐家，回到老姐家已经是10点多了，洗漱完毕就到了1点多才得以睡觉。第二天又去姑姑家吃午饭，吃完饭就马上去和兄弟小瑞子见面，由他送我们去坐高铁站，之后当晚回到北京。</p><p>回到北京的第二天又跑去跟老婆的朋友见面，这一路又花了N久啊<sub>，一直到晚上九点多才回到在北京的住处，第二天一早又送老婆孩子去机场，之后直接回公司，休假宣告结束</sub></p><p>这么一路下来，这个休假基本上全是在路上，比上班还要累，这就是我的假期啊~</p><h2>繁忙的驾照</h2><p>由于这次休假，一路上的各种不便让我下定了要拿驾照的决心，就在老婆孩子回柳州后我就马上着手准备驾校报名的事，没想到报架也那么麻烦，还需要暂住证啊之类的，麻烦，不过好在花在一个星期左右的时间总算是办完暂住证并同时报了名。</p><p>报名当周的周末就去参加法培课，然后定在下一个周五考科目一，在考试之前我做了很多次题目，而且一直重复了N遍，虽然花了很多时间，但是努力总算是没白废，在科目一考试中花了六分钟时间考了满分，第一个通过考试，于是马上约了周日的科目二上车学习，六个小时的时间都在开车，感觉还不错。</p><p>估计后面还要有两周多的时间上车练习，练习一旦结束马上就要预约科二考试，然后就是准备科三，希望九月份能最终合下驾照吧。</p><h2>繁忙的近期安排</h2><p>除了以上正在进行的繁忙计划之外，工作上最近也是各种计划各种赶进度，越来越感觉时间不够用了，不过同时也感觉这样的日子过得很充实，坏处是，为了进行这些计划，使我没有时间进行技术方面的学习，这是我感觉最不踏实的地方了。</p><h2>繁忙的收获</h2><p>现在想想，这一年已经过了一半多，自从离开上一份工作，我过得更加有意义，为了健康的健身投资，生活必须技能的学车计划，以及回家探亲，能让家里的老人见到孩子，不管是对我还是我父母老人这是最大的慰藉，我希望接下来的时间，我的生活事业都能有一个很大的改善，一切都能走向正轨，加油吧老少年。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;繁忙时代前言&lt;/h2&gt;
&lt;p&gt;从进入三月份进入新公司，一直到现在，刚看了一下日期，竟然刚好是13号，整整五个月的时间。现在想来，这五个月的时间我自己做起来的项目应该说只有一个半，但是这一个半项目贯穿了公司里多个项目多个部分，毕竟做的是基础开发，这也是必然的吧。&lt;/p&gt;
&lt;p&gt;当然了，之所以说繁忙，主要还是因为除了工作我还做了不少其它的事，总之，这段时间我把时间安排的非常紧凑，尽管很忙，但是这也让我过得很充实，下面尽量简单的记一个流水帐。&lt;/p&gt;
    
    </summary>
    
      <category term="日常生活" scheme="https://www.tobycn.org/categories/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Install a git server use gitolite over the ssh</title>
    <link href="https://www.tobycn.org/2014/04/15/install-a-git-server-use-gitolite-over-ssh-protocol/"/>
    <id>https://www.tobycn.org/2014/04/15/install-a-git-server-use-gitolite-over-ssh-protocol/</id>
    <published>2014-04-15T04:06:56.000Z</published>
    <updated>2018-03-08T02:46:48.051Z</updated>
    
    <content type="html"><![CDATA[<h3>闲话</h3><p>最近这段时间处在封闭开发状态，基本上没什么时间写日志了，不过现在也忙的差不多了，更重要的是，今天需要安装一台Git服务器做为开发之用，而且需要把安装过程整理出一份文档 ，所以，咱就直接写出来，也做为一篇日志发布了吧。</p><h3>进入正题</h3><p>建立服务器的软件我这里选用Gitolite，之所以选用Gitolite，一是因为之前曾经使用过Gitolite，再一个是因为Gitolite可配置性更高，而且更为小巧。而且，由于这个服务器只在内部使用，没有必要使用Gitlab这种体积庞大的提供过多的WEB方面功能的程序。</p><p>没有特别声明的都为在服务器上执行</p><ol><li>Git<br>使用系统命令安装git客户端，比如<code>yum install git</code>，版本最好不要太低，1.7以上。</li><li>建立Git帐户<br><code>useradd -d /opt/git -m git</code>，用户目录的位置不做要求，但是由于是专用帐号，最好是放在有备份保证的目录，便于管理。</li><li>生成管理公钥 （管理端）<br><code>ssh-keygen -t rsa -C &quot;Git Admin&quot; -f gitadmin</code><br>这个步骤需要注意的是生成密钥对最好不要加密码，否则有可能出现奇怪的问题。完成这一步后将gitadmin.pub文件传至git的HOME目录中备用。</li><li>同步Gitolite代码<br><code>git clone https://github.com/sitaramc/gitolite</code>，此命令需要在Git用户的HOME目录中执行。</li><li>安装Gitolite<br>在用户目录中执行<code>gitolite/install -ln</code>，参数的意思是在$HOME/bin目录中建立指向源代码目录的文件链接，这样做的好处是可以方便的升级gitolite，另外，install命令另一个参数是-to可以指定命令安装到的目录，默认情况下不需要指定。<br>需要注意的是，默认安装的时候需要将$HOME/bin加入$PATH，如果指定安装目标需要将$HOME/to_dir加入$PATH。<br>执行完install之后需要执行<code>gitolite setup -pk gitadmin.pub</code>。<br>完成后，需要再检查一下~/.ssh目录和其中的authorized_keys文件的权限，需要将权限控制为仅本人可读写。</li><li>同步管理库（管理端）<br>由于管理端或客户端与Git服务器之间的通讯是基于ssh的，所以，为了便于使用，需要对与Git服务器的连接进行单独配置，打开<code>~/.ssh/config</code>，在其中加入单独定义管理时所使用的密钥文件。</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">host gitadmin</span><br><span class="line">   HostName xxx.xxx.xxx.xxx</span><br><span class="line">  <span class="built_in"> User </span>git</span><br><span class="line">   IdentityFile \~/.ssh/gitadmin</span><br></pre></td></tr></table></figure><p>经过以上配置即可以执行<code>git clone gitadmin:gitadmin</code>获取管理库，之后所有对服务器的管理只能通过此管理库进行，严禁直接在服务器上对服务器进行修改。</p><ol start="7"><li>修改Gitolite配置及用户管理<br>详细使用配置及管理方法请参考源代码目录下的<code>README.txt</code></li><li>从Subversion向Git做版本迁移<br>两种方法<ul><li><p>git svn clone svn://url.to.svn/repos --no-metadata --authors-file=users.txt<br>直接从svn版本库中clone数据到本地，其中<br>–no-metadata 指定命令不在git版本库中加入svn版本元数据。<br>–authors-file 指定与svn用户相对应的git用户。</p></li><li><p>git svn init svn://url.to.svn/repos --no-metadata</p></li><li><p>git svn fetch --authors-file=users.txt<br>这两个命令为一组，第一个命令初始化一个基于svn源的git库，此时可以在该库的.git目录下修改branches和tags信息，完成之后使用第二个命令开始同步代码，此时代码将按照配置把不同分支或标签下的代码提交到git库的指定位置。<br>如要迁移的Subversion版本库使用遵循惯例的目录设置，则可以在第一种方法和第二种方法的第一条命令中加入-s选项，本选择可以简化同步的操作。</p></li></ul></li></ol><p>Windows版客户端TortoiseGit下载地址：<a href="http://download.tortoisegit.org/tgit/1.8.8.0/" target="_blank" rel="noopener">http://download.tortoisegit.org/tgit/1.8.8.0/</a><br>Pro Git: <a href="http://git-scm.com/book/zh/" target="_blank" rel="noopener">http://git-scm.com/book/zh/</a></p><h3>结束语</h3><p>Git的使用入门很容易 ，只需要简单的分支、标签管理和版本提交，基本上就可以满足日常的需求，当然，还有更多的特性需要在使用的过程中逐渐的接触和应用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;闲话&lt;/h3&gt;
&lt;p&gt;最近这段时间处在封闭开发状态，基本上没什么时间写日志了，不过现在也忙的差不多了，更重要的是，今天需要安装一台Git服务器做为开发之用，而且需要把安装过程整理出一份文档 ，所以，咱就直接写出来，也做为一篇日志发布了吧。&lt;/p&gt;
&lt;h3&gt;进入正题&lt;/h3
      
    
    </summary>
    
      <category term="Git" scheme="https://www.tobycn.org/categories/Git/"/>
    
    
      <category term="git" scheme="https://www.tobycn.org/tags/git/"/>
    
      <category term="gitolite" scheme="https://www.tobycn.org/tags/gitolite/"/>
    
      <category term="ssh" scheme="https://www.tobycn.org/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Get a TexturePacker free license</title>
    <link href="https://www.tobycn.org/2014/04/02/get-a-texturepacker-free-license/"/>
    <id>https://www.tobycn.org/2014/04/02/get-a-texturepacker-free-license/</id>
    <published>2014-04-02T12:10:28.000Z</published>
    <updated>2018-03-08T02:46:48.051Z</updated>
    
    <content type="html"><![CDATA[<h3>闲话几句</h3><p>昨天跟老婆吵了几句，当时确实是非常气愤，不过现在想想真的很划不来，气大伤身不说，昨天也因为这吵架导致了始终静不下心来学习，所以说，这吵架不仅伤身、伤心情，还浪费了时间。<br>其实本来也没有什么大不了的事情，没有必要非得争个是非黑白，如果确实觉得对方做的不合适，完全可以在对方心情恢复正常之后再换个角度讲给她听，这样在达到目的的同时也避免了伤和气。基本上应该有这个原则，在对方情绪激动的时候最好是避免正面的意见冲突，这不光是在两口子之间的相处之道，在和任何人相处时都是适用的。</p><h3>说点正题</h3><p><a href="http://www.codeandweb.com/texturepacker" title="Texture Packer" target="_blank" rel="noopener">Texture Packer</a>是一个非常方便的Sprite Sheet生成工具，我在<a href="/2014/03/31/about-sprite-sheet-and-tools/" title="About Sprite Sheet and Tools">About Sprite Sheet</a>一文中讲到过，那天我在写博文时就发现下面提示还有两天的试用期，于是去到官网上准备，然后就看到下面有个可以申请免费License的链接，看里面的说明，我的博客是符合条件的，于是就试着申请了一下，没想到今天就收到了作者发来的邮件。<br><img src="/images/get-a-texture-packer-free-license/mail1.png" alt="Email"><br>同时，下面还附送了一个<a href="http://www.codeandweb.com/physicseditor" title="Physics Editor" target="_blank" rel="noopener">Physics Editor</a>的授权文件，这个软件我也安装上了，看起来也是非常的强大，尽管我还没有试用，不过我想这对我学习游戏开发的过程一定会很有帮助，在此对作者表示剧烈的感谢。</p><h3>结语</h3><p>我想作者愿意为做技术的或跟此相关的人提供免费的授权，一方面是希望能帮助宣传这他的软件以使他能够获得更多的回报，另一方面也是希望他的用户更多，即便是没有得到金钱上的回报，但是由此带来的巨大成就感也是所有软件开发者内心所渴望的。<br>就像<a href="http://www.hector2.us" title="TIGER/HECTOR学艺碎碎念" target="_blank" rel="noopener">王爷</a>他老人家现在每天熬夜加班费劲巴力的花大量的时间在搞他的一个EF English辅助APP一样，他也没指望能在这个APP上获得什么经济回报，当然能得到经济回报更好，就算得不到，一旦用户多了，我想他也会忍不住请我动吃大吃一顿来庆祝一番的。【千里传音：我说的对吧，王爷？】。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;闲话几句&lt;/h3&gt;
&lt;p&gt;昨天跟老婆吵了几句，当时确实是非常气愤，不过现在想想真的很划不来，气大伤身不说，昨天也因为这吵架导致了始终静不下心来学习，所以说，这吵架不仅伤身、伤心情，还浪费了时间。&lt;br&gt;
其实本来也没有什么大不了的事情，没有必要非得争个是非黑白，如果确实觉
      
    
    </summary>
    
    
      <category term="TexturePacker" scheme="https://www.tobycn.org/tags/TexturePacker/"/>
    
  </entry>
  
  <entry>
    <title>About Sprite Sheet And Tools</title>
    <link href="https://www.tobycn.org/2014/03/31/about-sprite-sheet-and-tools/"/>
    <id>https://www.tobycn.org/2014/03/31/about-sprite-sheet-and-tools/</id>
    <published>2014-03-31T13:06:17.000Z</published>
    <updated>2018-03-08T02:46:48.049Z</updated>
    
    <content type="html"><![CDATA[<h3>闲话</h3><p>感冒好像有些更严重了，头很不舒服。</p><p>下午听王爷说他们发奖金了，虽然不多，但是也是要恭喜一下的，毕竟不管发多少，总比不发强吧，而且现在他的项目进展的也算是顺利。一想到这项目还是会有些郁闷，毕竟是我们哥几个一点点弄出来的，现在却成了别人的孩子，而且还是不太待见的孩子，郁闷。</p><h3>正文</h3><p>今天随便说说<a href="http://en.wikipedia.org/wiki/Sprite_(computer_graphics)" target="_blank" rel="noopener">Sprite Sheet</a>吧，简单来说，这是一个小图片集合。我印象中，这种技术最早用于WEB开发中，当在网页中使用很多小图片时，在访问时，浏览器需要对每个图片发起请求，而每次请求都只传送了一个很小的图片文件，这无形中就浪费了大量的HTTP请求和网络连接，即使在<a href="http://www.w3.org/Protocols/rfc2616/rfc2616.html" target="_blank" rel="noopener">HTTP 1.1</a>的环境中，默认的头Connection保持keep-alive时可以我重用连接，便是多次请求传送的Header也会浪费很多的流量。</p><p>因此，就有聪明人发明了这种方式，把多个小图片合成一个大图片，这样不仅减少了请求数、节约了资源，还使数据传输更加有效率，于是人们亲切的称之为Sprite Sheet。</p><p>而在游戏开发中，合理的使用Sprite Sheet同样有着积极的作用，比如将相关性较高的图片合并到一张大图片中，不仅可以使图片的渲染过程得到优化，同时还能使图片资源更便于管理（这也是我最近也学到的，:)）。</p><a id="more"></a><h3>相关工具</h3><p>最早的时候，我也曾经做过WEB开发，那时候比较笨，也可以是当时没有发现更好用的工具，我一般是直接使用Photoshop或Firework进行拼图，同时记下每张小图片的坐标，在使用的时候将这些坐标用在CSS中获取相应的小图片，这种方法相当相当的麻烦，后来就因为这个原因我就索性不再自己做这件事了。</p><p>之后的发展我就没有见证过，因为那时候我已经离开了WEB开发这一行，而直接进入了游戏后端开发，在游戏后端开发中用不着这类的知识。直到最近，我开始学一些游戏开发的知识，这才又一次接触到<a href="http://en.wikipedia.org/wiki/Sprite_(computer_graphics)" target="_blank" rel="noopener">Sprite Sheet</a>。</p><p>首先接触到的工具是<a href="http://www.zwopple.com/zwoptex/" title="Zwoptex" target="_blank" rel="noopener">Zwoptex</a>，这个工具用起来也算是比较方便，简单说一下其用法。</p><ol><li>打开zwoptex，将图片拖入其中。<br><img src="/images/about-sprite-sheet/zwoptex1.png" alt="Zwoptex图1"></li><li>点击工具栏中Layout。<br><img src="/images/about-sprite-sheet/zwoptex2.png" alt="Zwoptex图2"></li><li>调整图片大小。</li><li>重复2、3步，直到图片大小合适，并能够将其中小图片正确显示。</li><li>点击File - Publish Settings，并设置。</li><li>点击Toolbar中的Publish，导出文件。</li></ol><p>在使用中，这个工具可以满足一般需求，并且在导出图片时支持同时导出<code>.plist</code>文件，这在Cocos2D和Cocos2D-X开发中用起来自然是极方便的，更重要的是，这个软件不注册也可以一直使用，唯一的不爽就是会有弹窗3秒倒计时，虽然不爽，但是倒也是可以接受的。</p><p>在说另一个工具 <a href="http://www.codeandweb.com/texturepacker" title="Texture Packer" target="_blank" rel="noopener">Texture Packer</a>，这是我的一个朋友介绍给我的，这也是个收费软件，而且，如果不购买就只能试用7天，嗯，虽然时间不多，但是也足以让你体会到这个软件的方便之处了。</p><p>以下是使用方法：</p><ol><li>打开Texture Packer，并将图片拖入其中。<br><img src="/images/about-sprite-sheet/texturepacker1.png" alt="Texture Packer图1"><br>当图片拖入程序的一瞬间你会发现，图片已经排列好了，而且所占用的空间也是最小的。<br><img src="/images/about-sprite-sheet/texturepacker2.png" alt="Texture Packer图2"></li><li>在右侧Data Format中选择需要的格式，然后点击Toolbar中的Publish。</li><li>没有第三步了。</li></ol><p>到此，这两个工具就说明完毕了，当然了，我在这里说的并不是全部，每个工具都有很多可以设置的选项，这个需要根据需要自己进行研究了。</p><p>我之所以拿这两个工具进行说明，最主要还是因为，目前为止我就只接触到这两个跟<a href="http://en.wikipedia.org/wiki/Sprite_(computer_graphics)" target="_blank" rel="noopener">Sprite Sheet</a>相关的工具，而且两个都很好用。当然了，如果是我选择一个，我肯定会选<a href="http://www.codeandweb.com/texturepacker" title="Texture Packer" target="_blank" rel="noopener">Texture Packer</a>，其原因是，这个工具支持的导出格式更多，而且在导入图片时就自动对图片进行最优的排列，并进行适当的翻转，以求能使其占用的空间更小一些。而<a href="http://www.zwopple.com/zwoptex/" title="Zwoptex" target="_blank" rel="noopener">Zwoptex</a>在自动化方面就差了一些，需要自行调整画布尺寸，而且，在排列图片时就显得比较死板。</p><p>另外，<a href="http://www.codeandweb.com/texturepacker" title="Texture Packer" target="_blank" rel="noopener">Texture Packer</a>在导入图片时可以选择导入文件夹，这一点<a href="http://www.zwopple.com/zwoptex/" title="Zwoptex" target="_blank" rel="noopener">Zwoptex</a>是无法做到的，同时，<a href="http://www.codeandweb.com/texturepacker" title="Texture Packer" target="_blank" rel="noopener">Texture Packer</a>导出的图片也较后者稍小，例如我在使用中生成的图片，前者生成的图片171K，后者生成的为180K。</p><h3>结束</h3><p>本文只是对这两个软件进行简单的测试、比较，结论也属于个人观感，这只是为自己选择软件提供一个依据。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3&gt;闲话&lt;/h3&gt;
&lt;p&gt;感冒好像有些更严重了，头很不舒服。&lt;/p&gt;
&lt;p&gt;下午听王爷说他们发奖金了，虽然不多，但是也是要恭喜一下的，毕竟不管发多少，总比不发强吧，而且现在他的项目进展的也算是顺利。一想到这项目还是会有些郁闷，毕竟是我们哥几个一点点弄出来的，现在却成了别人的孩子，而且还是不太待见的孩子，郁闷。&lt;/p&gt;
&lt;h3&gt;正文&lt;/h3&gt;
&lt;p&gt;今天随便说说&lt;a href=&quot;http://en.wikipedia.org/wiki/Sprite_(computer_graphics)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sprite Sheet&lt;/a&gt;吧，简单来说，这是一个小图片集合。我印象中，这种技术最早用于WEB开发中，当在网页中使用很多小图片时，在访问时，浏览器需要对每个图片发起请求，而每次请求都只传送了一个很小的图片文件，这无形中就浪费了大量的HTTP请求和网络连接，即使在&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HTTP 1.1&lt;/a&gt;的环境中，默认的头Connection保持keep-alive时可以我重用连接，便是多次请求传送的Header也会浪费很多的流量。&lt;/p&gt;
&lt;p&gt;因此，就有聪明人发明了这种方式，把多个小图片合成一个大图片，这样不仅减少了请求数、节约了资源，还使数据传输更加有效率，于是人们亲切的称之为Sprite Sheet。&lt;/p&gt;
&lt;p&gt;而在游戏开发中，合理的使用Sprite Sheet同样有着积极的作用，比如将相关性较高的图片合并到一张大图片中，不仅可以使图片的渲染过程得到优化，同时还能使图片资源更便于管理（这也是我最近也学到的，:)）。&lt;/p&gt;
    
    </summary>
    
      <category term="Game" scheme="https://www.tobycn.org/categories/Game/"/>
    
    
      <category term="sprite sheet" scheme="https://www.tobycn.org/tags/sprite-sheet/"/>
    
      <category term="web" scheme="https://www.tobycn.org/tags/web/"/>
    
      <category term="game" scheme="https://www.tobycn.org/tags/game/"/>
    
      <category term="TexturePacker" scheme="https://www.tobycn.org/tags/TexturePacker/"/>
    
      <category term="zwoptex" scheme="https://www.tobycn.org/tags/zwoptex/"/>
    
  </entry>
  
  <entry>
    <title>Cocos2D-X learning 4</title>
    <link href="https://www.tobycn.org/2014/03/29/cocos2d-x-learning-4/"/>
    <id>https://www.tobycn.org/2014/03/29/cocos2d-x-learning-4/</id>
    <published>2014-03-29T15:22:08.000Z</published>
    <updated>2018-03-08T02:46:48.050Z</updated>
    
    <content type="html"><![CDATA[<h3>废话</h3><p>今天和王爷一起去传说中的车库咖啡见了一个创业团队，跟他们有了一个小时左右的交流时间，交流的详情就不说了，总之，让我和王爷多了一个很好的话题，在回家的路上，我们就这个话题进行了友好、亲切而又愉快的交流，受益匪浅。<br>不过，最糟心的是，跑这一趟我竟然感冒了，主要是天气热，出了很多汗，而在地铁通道里风太大，晾了汗了，纠结死我了，明天还要去见一个离得比较近的创业团队，我在犹豫到底还要不要去。</p><h3>概述</h3><p>今天随便说说在Cocos2D-X开发中，关于对CCSprite方面的优化，总得来说就是尽可能减少渲染次数，这样可以使游戏运行更有效率，能够空出更多的CPU时间做其它的事情，以增加游戏的流畅与体验。</p><h3>正文</h3><p>Cocos2D为图片资源批量加载提供了<code>CCSpriteFrameCache</code>类，此类可以通过使用Sprite Sheet文件来减少图片加载次数，简单来说，就是把多个图片拼成一个大图片，之后通过坐标在大文件上取到相应的图片，这个技术被广泛使用在网页设计及游戏开发中。在这里我使用了一个叫做Zwoptex的软件自动生成大图片及相应的<code>.plist</code>，软件的具体使用方法就不在这里细说了（另外，朋友介绍说Texture Packer是可以更好的做这件事的工具，改天尝试一下）。</p><p>另外，Cocos2D还提供了一个<code>CCSpriteBatchNode</code>类，这个类主要作用是，当相同图片资源被重复使用时，通过这个类可以减少使相同的图片只渲染一次，具体做法看下面的代码。<br>PS: 代码基于上一篇BLOG，只对关键部分进行说明。</p><figure class="highlight c++"><figcaption><span>GameSceneDH.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __StudyCocos2D__GameSceneDH__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __StudyCocos2D__GameSceneDH__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cocos2d.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cocos2d;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameSceneDH</span>:</span> <span class="keyword">public</span> CCLayer &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> CCScene *<span class="title">scene</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    CREATE_FUNC(GameSceneDH);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c++"><figcaption><span>GameSceneDH.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  GameSceneDH.cpp</span></span><br><span class="line"><span class="comment">//  StudyCocos2D</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Toby Lee on 14-3-30.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"GameSceneDH.h"</span></span></span><br><span class="line">CCScene * GameSceneDH::scene()</span><br><span class="line">&#123;</span><br><span class="line">    CCScene *scene = CCScene::create();</span><br><span class="line">    CCLayer *layer = GameSceneDH::create();</span><br><span class="line">    scene-&gt;addChild(layer);</span><br><span class="line">    <span class="keyword">return</span> scene;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> GameSceneDH::init()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!CCLayer::init()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    CCSize winSize = CCDirector::sharedDirector()-&gt;getWinSize();</span><br><span class="line">    </span><br><span class="line">    CCSprite *background = CCSprite::create(<span class="string">"大唐边境.jpg"</span>);</span><br><span class="line">    CCSize backgroundSize = background-&gt;getContentSize();</span><br><span class="line">    background-&gt;setScale(winSize.width / backgroundSize.width);</span><br><span class="line">    background-&gt;setPosition(ccp(winSize.width/<span class="number">2</span>, winSize.height/<span class="number">2</span>));</span><br><span class="line">    <span class="keyword">this</span>-&gt;addChild(background);</span><br><span class="line">    </span><br><span class="line">    CCSpriteFrameCache *frameCache = CCSpriteFrameCache::sharedSpriteFrameCache();</span><br><span class="line">    frameCache-&gt;addSpriteFramesWithFile(<span class="string">"DH.plist"</span>);</span><br><span class="line">    </span><br><span class="line">    CCSpriteFrame *frameDH0, *frameDH1, *frameDH2, *frameDH3, *frameDH4, *frameDH5;</span><br><span class="line">    frameDH0 = frameCache-&gt;spriteFrameByName(<span class="string">"DH (0).png"</span>);</span><br><span class="line">    frameDH1 = frameCache-&gt;spriteFrameByName(<span class="string">"DH (1).png"</span>);</span><br><span class="line">    frameDH2 = frameCache-&gt;spriteFrameByName(<span class="string">"DH (2).png"</span>);</span><br><span class="line">    frameDH3 = frameCache-&gt;spriteFrameByName(<span class="string">"DH (3).png"</span>);</span><br><span class="line">    frameDH4 = frameCache-&gt;spriteFrameByName(<span class="string">"DH (4).png"</span>);</span><br><span class="line">    frameDH5 = frameCache-&gt;spriteFrameByName(<span class="string">"DH (5).png"</span>);</span><br><span class="line">    </span><br><span class="line">    frameDH0-&gt;autorelease();</span><br><span class="line">    frameDH1-&gt;autorelease();</span><br><span class="line">    frameDH2-&gt;autorelease();</span><br><span class="line">    frameDH3-&gt;autorelease();</span><br><span class="line">    frameDH4-&gt;autorelease();</span><br><span class="line">    frameDH5-&gt;autorelease();</span><br><span class="line">    </span><br><span class="line">    CCSprite *sp0 = CCSprite::createWithSpriteFrame(frameDH0);</span><br><span class="line">    sp0-&gt;setPosition(ccp(<span class="number">50</span>, <span class="number">150</span>));</span><br><span class="line">    <span class="keyword">this</span>-&gt;addChild(sp0);</span><br><span class="line">    CCSprite *sp1 = CCSprite::createWithSpriteFrame(frameDH1);</span><br><span class="line">    sp1-&gt;setPosition(ccp(<span class="number">140</span>, <span class="number">150</span>));</span><br><span class="line">    <span class="keyword">this</span>-&gt;addChild(sp1);</span><br><span class="line">    CCSprite *sp2 = CCSprite::createWithSpriteFrame(frameDH2);</span><br><span class="line">    sp2-&gt;setPosition(ccp(<span class="number">230</span>, <span class="number">150</span>));</span><br><span class="line">    <span class="keyword">this</span>-&gt;addChild(sp2);</span><br><span class="line">    CCSprite *sp3 = CCSprite::createWithSpriteFrame(frameDH3);</span><br><span class="line">    sp3-&gt;setPosition(ccp(<span class="number">320</span>, <span class="number">150</span>));</span><br><span class="line">    <span class="keyword">this</span>-&gt;addChild(sp3);</span><br><span class="line">    CCSprite *sp4 = CCSprite::createWithSpriteFrame(frameDH4);</span><br><span class="line">    sp4-&gt;setPosition(ccp(<span class="number">410</span>, <span class="number">150</span>));</span><br><span class="line">    <span class="keyword">this</span>-&gt;addChild(sp4);</span><br><span class="line">    CCSprite *sp5 = CCSprite::createWithSpriteFrame(frameDH5);</span><br><span class="line">    sp5-&gt;setPosition(ccp(<span class="number">500</span>, <span class="number">150</span>));</span><br><span class="line">    <span class="keyword">this</span>-&gt;addChild(sp5);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码中，第25-29行为游戏添加了背景，这个不在本文的写作目的之中，其中27、28行是将背景的大小和位置调整到铺满整个窗口。<br>第31、32行利用<code>.plist</code>文件初始化了一个SpriteSheet图片，<code>CCSpriteFrameCache</code>类全局有效以单例的形式使用，但是为了方便后面使用，这里单独声明了一个<code>CCSpriteFrameCache</code>对象。<br>从34行开始到第40行，声明一组<code>CCSpriteFrame</code>对象，并通过文件名在<code>CCSpriteFrameCache</code>类中初始化。从49行到66行，通过已经创建的``CCSpriteFrame<code>对象创建一些相应的</code>CCSprite`实例，并做位置做相应的调整后加入到场景中。<br>在这里为了便于说明，尽可能少的牵涉到无关内容，对代码本身并没做优化。<br><img src="/images/cocos2d-x-learning-4/before.png" alt="进行CCSpriteBatchNode优化前"><br>注意看界面左下角的帧率信息。</p><p>下面，我们在代码中通过<code>CCSpriteBatchNode</code>对程序进行优化，代码如下：</p><figure class="highlight cpp"><figcaption><span>GameSceneDH.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  GameSceneDH.cpp</span></span><br><span class="line"><span class="comment">//  StudyCocos2D</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Toby Lee on 14-3-30.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"GameSceneDH.h"</span></span></span><br><span class="line">CCScene * GameSceneDH::scene()</span><br><span class="line">&#123;</span><br><span class="line">    CCScene *scene = CCScene::create();</span><br><span class="line">    CCLayer *layer = GameSceneDH::create();</span><br><span class="line">    scene-&gt;addChild(layer);</span><br><span class="line">    <span class="keyword">return</span> scene;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> GameSceneDH::init()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!CCLayer::init()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    CCSize winSize = CCDirector::sharedDirector()-&gt;getWinSize();</span><br><span class="line">    </span><br><span class="line">    CCSprite *background = CCSprite::create(<span class="string">"大唐边境.jpg"</span>);</span><br><span class="line">    CCSize backgroundSize = background-&gt;getContentSize();</span><br><span class="line">    background-&gt;setScale(winSize.width / backgroundSize.width);</span><br><span class="line">    background-&gt;setPosition(ccp(winSize.width/<span class="number">2</span>, winSize.height/<span class="number">2</span>));</span><br><span class="line">    <span class="keyword">this</span>-&gt;addChild(background);</span><br><span class="line">    </span><br><span class="line">    CCSpriteFrameCache *frameCache = CCSpriteFrameCache::sharedSpriteFrameCache();</span><br><span class="line">    frameCache-&gt;addSpriteFramesWithFile(<span class="string">"DH.plist"</span>);</span><br><span class="line">    CCSpriteBatchNode *batchNode = CCSpriteBatchNode::create(<span class="string">"DH.png"</span>);</span><br><span class="line">    <span class="keyword">this</span>-&gt;addChild(batchNode);</span><br><span class="line">    </span><br><span class="line">    CCSpriteFrame *frameDH0, *frameDH1, *frameDH2, *frameDH3, *frameDH4, *frameDH5;</span><br><span class="line">    frameDH0 = frameCache-&gt;spriteFrameByName(<span class="string">"DH (0).png"</span>);</span><br><span class="line">    frameDH1 = frameCache-&gt;spriteFrameByName(<span class="string">"DH (1).png"</span>);</span><br><span class="line">    frameDH2 = frameCache-&gt;spriteFrameByName(<span class="string">"DH (2).png"</span>);</span><br><span class="line">    frameDH3 = frameCache-&gt;spriteFrameByName(<span class="string">"DH (3).png"</span>);</span><br><span class="line">    frameDH4 = frameCache-&gt;spriteFrameByName(<span class="string">"DH (4).png"</span>);</span><br><span class="line">    frameDH5 = frameCache-&gt;spriteFrameByName(<span class="string">"DH (5).png"</span>);</span><br><span class="line">    </span><br><span class="line">    frameDH0-&gt;autorelease();</span><br><span class="line">    frameDH1-&gt;autorelease();</span><br><span class="line">    frameDH2-&gt;autorelease();</span><br><span class="line">    frameDH3-&gt;autorelease();</span><br><span class="line">    frameDH4-&gt;autorelease();</span><br><span class="line">    frameDH5-&gt;autorelease();</span><br><span class="line">    </span><br><span class="line">    CCSprite *sp0 = CCSprite::createWithSpriteFrame(frameDH0);</span><br><span class="line">    sp0-&gt;setPosition(ccp(<span class="number">50</span>, <span class="number">150</span>));</span><br><span class="line">    batchNode-&gt;addChild(sp0);</span><br><span class="line">    CCSprite *sp1 = CCSprite::createWithSpriteFrame(frameDH1);</span><br><span class="line">    sp1-&gt;setPosition(ccp(<span class="number">140</span>, <span class="number">150</span>));</span><br><span class="line">    batchNode-&gt;addChild(sp1);</span><br><span class="line">    CCSprite *sp2 = CCSprite::createWithSpriteFrame(frameDH2);</span><br><span class="line">    sp2-&gt;setPosition(ccp(<span class="number">230</span>, <span class="number">150</span>));</span><br><span class="line">    batchNode-&gt;addChild(sp2);</span><br><span class="line">    CCSprite *sp3 = CCSprite::createWithSpriteFrame(frameDH3);</span><br><span class="line">    sp3-&gt;setPosition(ccp(<span class="number">320</span>, <span class="number">150</span>));</span><br><span class="line">    batchNode-&gt;addChild(sp3);</span><br><span class="line">    CCSprite *sp4 = CCSprite::createWithSpriteFrame(frameDH4);</span><br><span class="line">    sp4-&gt;setPosition(ccp(<span class="number">410</span>, <span class="number">150</span>));</span><br><span class="line">    batchNode-&gt;addChild(sp4);</span><br><span class="line">    CCSprite *sp5 = CCSprite::createWithSpriteFrame(frameDH5);</span><br><span class="line">    sp5-&gt;setPosition(ccp(<span class="number">500</span>, <span class="number">150</span>));</span><br><span class="line">    batchNode-&gt;addChild(sp5);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中，第33-34行，创建了一个<code>CCSpriteBatchNode</code>对象，并将其加入场景，在51-68行中，所有的<code>CCSprite</code>对象全部加入到<code>CCSpriteBatchNode</code>对象，此时，所有的<code>CCSprite</code>将不再重新渲染，如下图：<br><img src="/images/cocos2d-x-learning-4/after.png" alt="经过CCSpriteBatchNode优化后"><br>与之前的截图相比，渲染次数减少到2，说明这样的优化方法是可行的。</p><p>说明：<code>CCSprite</code>对象必须加入到<code>CCSpriteBatchNode</code>中才能起到优化作用，如果直接将<code>CCSprite</code>加入到场景中，则不会重用<code>CCSpriteBatchNode</code>的渲染结果。这里可以理解为，<code>CCSpriteBatchNode</code>是一个虚拟的容器，将此容器加入到场景后，再将<code>CCSprite</code>加入其中，由<code>CCSpriteBatchNode</code>对其进行管理，另外，如果<code>CCSprite</code>使用的资源不包含在<code>CCSpriteBatchNode</code>初始化的资源中，则程序会出现异常。</p><h3>结束</h3><p>程序的优化方法有很多种，但是并不是所有的优化方法都适用于当前的应用场景 ，这也牵涉到优化的性价比的问题，对程序进行适度的优化才是最正确的。</p><p>另：由于本人是初学跟前端有关的开发，特别是游戏前端，因此，在我所讨论的内容中难免有所偏颇，希望能够得到大家的指正，谢谢。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3&gt;废话&lt;/h3&gt;
&lt;p&gt;今天和王爷一起去传说中的车库咖啡见了一个创业团队，跟他们有了一个小时左右的交流时间，交流的详情就不说了，总之，让我和王爷多了一个很好的话题，在回家的路上，我们就这个话题进行了友好、亲切而又愉快的交流，受益匪浅。&lt;br&gt;
不过，最糟心的是，跑这一趟我竟然感冒了，主要是天气热，出了很多汗，而在地铁通道里风太大，晾了汗了，纠结死我了，明天还要去见一个离得比较近的创业团队，我在犹豫到底还要不要去。&lt;/p&gt;
&lt;h3&gt;概述&lt;/h3&gt;
&lt;p&gt;今天随便说说在Cocos2D-X开发中，关于对CCSprite方面的优化，总得来说就是尽可能减少渲染次数，这样可以使游戏运行更有效率，能够空出更多的CPU时间做其它的事情，以增加游戏的流畅与体验。&lt;/p&gt;
&lt;h3&gt;正文&lt;/h3&gt;
&lt;p&gt;Cocos2D为图片资源批量加载提供了&lt;code&gt;CCSpriteFrameCache&lt;/code&gt;类，此类可以通过使用Sprite Sheet文件来减少图片加载次数，简单来说，就是把多个图片拼成一个大图片，之后通过坐标在大文件上取到相应的图片，这个技术被广泛使用在网页设计及游戏开发中。在这里我使用了一个叫做Zwoptex的软件自动生成大图片及相应的&lt;code&gt;.plist&lt;/code&gt;，软件的具体使用方法就不在这里细说了（另外，朋友介绍说Texture Packer是可以更好的做这件事的工具，改天尝试一下）。&lt;/p&gt;
&lt;p&gt;另外，Cocos2D还提供了一个&lt;code&gt;CCSpriteBatchNode&lt;/code&gt;类，这个类主要作用是，当相同图片资源被重复使用时，通过这个类可以减少使相同的图片只渲染一次，具体做法看下面的代码。&lt;br&gt;
PS: 代码基于上一篇BLOG，只对关键部分进行说明。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;figcaption&gt;&lt;span&gt;GameSceneDH.h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifndef&lt;/span&gt; __StudyCocos2D__GameSceneDH__&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; __StudyCocos2D__GameSceneDH__&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&quot;cocos2d.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; cocos2d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GameSceneDH&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; CCLayer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; CCScene *&lt;span class=&quot;title&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CREATE_FUNC(GameSceneDH);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Cocos2D" scheme="https://www.tobycn.org/categories/Cocos2D/"/>
    
    
      <category term="game" scheme="https://www.tobycn.org/tags/game/"/>
    
      <category term="TexturePacker" scheme="https://www.tobycn.org/tags/TexturePacker/"/>
    
      <category term="zwoptex" scheme="https://www.tobycn.org/tags/zwoptex/"/>
    
      <category term="cocos2d-x" scheme="https://www.tobycn.org/tags/cocos2d-x/"/>
    
      <category term="cocos2d" scheme="https://www.tobycn.org/tags/cocos2d/"/>
    
  </entry>
  
  <entry>
    <title>Cocos2D-X learning 3 (CCScene and CCMenu)</title>
    <link href="https://www.tobycn.org/2014/03/28/cocos2d-x-learning-3-(ccscene-and-ccmenu)/"/>
    <id>https://www.tobycn.org/2014/03/28/cocos2d-x-learning-3-(ccscene-and-ccmenu)/</id>
    <published>2014-03-28T15:41:37.000Z</published>
    <updated>2018-03-08T02:46:48.050Z</updated>
    
    <content type="html"><![CDATA[<h3>废话</h3><p>本来部门计划今天下午全部门去搞团建的，主要活动是开卡丁车、桌游等项目，可惜天不从人愿，早晨有点下雨，好不容易盼到中午晴天，结果Leader又一个通知，说今天事情太多，活动改期到下周了，我勒个去的，废话不多说，进去正题。</p><h3>概述</h3><p>今天练习的内容主要是在Cocos2D开发中，对菜单的运用以及场景切换，中间还涉及到对于CCSprite对象的一些操作和schedule的简单应用。</p><h3>正文</h3><p>首先用<code>create_project.py</code>建立一个基础项目，然后分别建立两个CCLayer的子类。</p><figure class="highlight c++"><figcaption><span>StudyCocos2D.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  StudyCocos2D.h</span></span><br><span class="line"><span class="comment">//  StudyCocos2D</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Toby Lee on 14-3-28.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __StudyCocos2D__StudyCocos2D__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __StudyCocos2D__StudyCocos2D__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cocos2d.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cocos2d;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudyCocos2D</span>:</span> <span class="keyword">public</span> CCLayer &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onStartClick</span><span class="params">(CCObject *obj)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> CCScene * <span class="title">scene</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    CREATE_FUNC(StudyCocos2D);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* defined(__StudyCocos2D__StudyCocos2D__) */</span></span></span><br></pre></td></tr></table></figure><p>这是一个最简单的头文件，相比上一篇只多了一个私有方法<code>void onStartClick(CCObject *obj)</code>，其作用后面再说明。</p><a id="more"></a><figure class="highlight c++"><figcaption><span>StudyCocos2D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  StudyCocos2D.cpp</span></span><br><span class="line"><span class="comment">//  StudyCocos2D</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Toby Lee on 14-3-28.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"StudyCocos2D.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RotatingIcon.h"</span></span></span><br><span class="line"></span><br><span class="line">CCScene * StudyCocos2D::scene()</span><br><span class="line">&#123;</span><br><span class="line">    CCScene *scene = CCScene::create();</span><br><span class="line">    CCLayer *layer = StudyCocos2D::create();</span><br><span class="line">    scene-&gt;addChild(layer);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> scene;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> StudyCocos2D::init()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!CCLayer::init()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    CCMenuItemFont *menuItem = CCMenuItemFont::create(<span class="string">"START GAME"</span>, <span class="keyword">this</span>, menu_selector(StudyCocos2D::onStartClick));</span><br><span class="line">    </span><br><span class="line">    CCMenu *menu = CCMenu::create(menuItem, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">this</span>-&gt;addChild(menu);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> StudyCocos2D::onStartClick(cocos2d::CCObject *obj)</span><br><span class="line">&#123;</span><br><span class="line">    CCScene *iconScene = RotatingIcon::scene();</span><br><span class="line">    iconScene-&gt;autorelease();</span><br><span class="line">    CCDirector::sharedDirector()-&gt;replaceScene(iconScene);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码生成场景如下<br><img src="/images/cocos2d-x-learning-3/scene1.png" alt="场景1"></p><p><code>StudyCocos2D::init()</code>方法中完成了建立，菜单项的工作，使用<code>CCMenuItemFont</code>类建立一个基于文字的菜单，在<code>CCMenuItemFont::create(const char *, CCObject, selector)</code>方法中完成了一个文字菜单项的建立，第一个参数是显示在菜单中的文字，第二个参数是作用于哪一个对象，第三个则是指定响应触发动作的方法。<br><code>void StudyCocos2D::onStartClick(CCObject *obj)</code>方法完成了点击菜单后的操作，首先建立从<code>RotatingIcon</code>类中创建一个场景，然后用<code>CCDirector::replaceScene(CCScene *)</code>方法将显示的场景替换成新的场景。<br><code>iconScene-&gt;autorelease()</code>方法的调用，会使本场景不在使用时自动释放。</p><figure class="highlight c++"><figcaption><span>RotatingIcon.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  RotatingIcon.h</span></span><br><span class="line"><span class="comment">//  StudyCocos2D</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Toby Lee on 14-3-28.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __StudyCocos2D__RotatingIcon__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __StudyCocos2D__RotatingIcon__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cocos2d.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cocos2d;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RotatingIcon</span>:</span> <span class="keyword">public</span> CCLayer &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotatingIcon</span><span class="params">(<span class="keyword">float</span> t)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> CCScene * <span class="title">scene</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    CREATE_FUNC(RotatingIcon);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* defined(__StudyCocos2D__RotatingIcon__) */</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>RotatingIcon.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  RotatingIcon.cpp</span></span><br><span class="line"><span class="comment">//  StudyCocos2D</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Toby Lee on 14-3-28.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RotatingIcon.h"</span></span></span><br><span class="line"></span><br><span class="line">CCScene * RotatingIcon::scene()</span><br><span class="line">&#123;</span><br><span class="line">    CCScene *scene = CCScene::create();</span><br><span class="line">    CCLayer *layer = RotatingIcon::create();</span><br><span class="line">    scene-&gt;addChild(layer);</span><br><span class="line">    <span class="keyword">return</span> scene;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> RotatingIcon::init()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!CCLayer::init()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    CCSize winSize = CCDirector::sharedDirector()-&gt;getWinSize();</span><br><span class="line">    </span><br><span class="line">    CCSprite *icon = CCSprite::create(<span class="string">"Icon-72.png"</span>);</span><br><span class="line">    icon-&gt;setPosition(ccp(winSize.width/<span class="number">2</span>, winSize.height/<span class="number">2</span>));</span><br><span class="line">    <span class="keyword">this</span>-&gt;addChild(icon);</span><br><span class="line">    </span><br><span class="line">    schedule(schedule_selector(RotatingIcon::rotatingIcon));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> RotatingIcon::rotatingIcon(<span class="keyword">float</span> t)</span><br><span class="line">&#123;</span><br><span class="line">    CCArray *childNodes = <span class="keyword">this</span>-&gt;getChildren();</span><br><span class="line">    <span class="keyword">if</span> (childNodes-&gt;count() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        CCSprite *icon = (CCSprite *)childNodes-&gt;objectAtIndex(<span class="number">0</span>);</span><br><span class="line">        icon-&gt;setRotation(icon-&gt;getRotation() + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/cocos2d-x-learning-3/scene2.png" alt="场景2"><br>这里声明并定义了RotatingIcon类，在此类中需要说明的是，在Cocos2D中，精灵的锚点在该精灵的中心，如一个包含图片的<code>CCSprite</code>对象，在没有明确设置锚点及坐标时，会显示在场景的左下角，且只显示四分之一，因此，对于精灵对象一般都需要明确指定其坐标。<br>在以上的代码中，使用<code>CCDirector::getWinSize()</code>得到游戏显示区域的大小，之后就可以在下面的<code>ccp(winSize.width/2, winSize.height/2)</code>中计算出场景的中心，经过此设置后，图片将显示在整个场景的中心，其中<code>ccp(__X__, __Y__)</code>是一个宏，这个宏可以用来产生一个<code>CCPoint</code>对象。<br><code>schedule</code>定义了一个执行计划，在以上代码中的调用方式，可以在程序在每一帧都执行一次指定的方法。<br>在<code>void RotatingIcon::rotatingIcon(float t)</code>方法中，程序首先获取当前场景的子元素，此调用将返回一个<code>CCArray</code>对象。在获取到第一个子元素后，直接对该元素的旋转角度进行加1的操作，以实现图标不间断旋转的功能。</p><p>最后，在<code>AppDelegate.cpp</code>文件中，将建立场景的那一行代码修改为<code>CCScene *pScene = StudyCocos2D::scene();</code>。</p><h3>结束</h3><p>今天练习的内容非常简单，就是实现了菜单、场景切换和图标定位及旋转的功能，这些都是基础的概念和元素，需要很好的掌握其用法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3&gt;废话&lt;/h3&gt;
&lt;p&gt;本来部门计划今天下午全部门去搞团建的，主要活动是开卡丁车、桌游等项目，可惜天不从人愿，早晨有点下雨，好不容易盼到中午晴天，结果Leader又一个通知，说今天事情太多，活动改期到下周了，我勒个去的，废话不多说，进去正题。&lt;/p&gt;
&lt;h3&gt;概述&lt;/h3&gt;
&lt;p&gt;今天练习的内容主要是在Cocos2D开发中，对菜单的运用以及场景切换，中间还涉及到对于CCSprite对象的一些操作和schedule的简单应用。&lt;/p&gt;
&lt;h3&gt;正文&lt;/h3&gt;
&lt;p&gt;首先用&lt;code&gt;create_project.py&lt;/code&gt;建立一个基础项目，然后分别建立两个CCLayer的子类。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;figcaption&gt;&lt;span&gt;StudyCocos2D.h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  StudyCocos2D.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  StudyCocos2D&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Created by Toby Lee on 14-3-28.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifndef&lt;/span&gt; __StudyCocos2D__StudyCocos2D__&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; __StudyCocos2D__StudyCocos2D__&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&quot;cocos2d.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; cocos2d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StudyCocos2D&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; CCLayer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onStartClick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(CCObject *obj)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; CCScene * &lt;span class=&quot;title&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CREATE_FUNC(StudyCocos2D);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* defined(__StudyCocos2D__StudyCocos2D__) */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是一个最简单的头文件，相比上一篇只多了一个私有方法&lt;code&gt;void onStartClick(CCObject *obj)&lt;/code&gt;，其作用后面再说明。&lt;/p&gt;
    
    </summary>
    
      <category term="Cocos2D" scheme="https://www.tobycn.org/categories/Cocos2D/"/>
    
    
      <category term="game" scheme="https://www.tobycn.org/tags/game/"/>
    
      <category term="cocos2d-x" scheme="https://www.tobycn.org/tags/cocos2d-x/"/>
    
      <category term="cocos2d" scheme="https://www.tobycn.org/tags/cocos2d/"/>
    
  </entry>
  
  <entry>
    <title>关于MySQL网络协议中的数据包序号</title>
    <link href="https://www.tobycn.org/2014/03/28/about-the-seqno-of-packet-in-mysql-network-protocol/"/>
    <id>https://www.tobycn.org/2014/03/28/about-the-seqno-of-packet-in-mysql-network-protocol/</id>
    <published>2014-03-28T06:00:08.000Z</published>
    <updated>2018-03-08T02:46:48.049Z</updated>
    
    <content type="html"><![CDATA[<p>对MySQL协议稍作了解后，我们就知道在协议中，服务端与客户端相互之间的通讯都是以包的形式进行的。</p><p>在这些包中，有一个固定的特征就是前四个字节用途不变，前三个字节表示数据包的长度，第四个字节表示当前包在本次交互中是序数。</p><p>前三个字节最大只能表达16M的长度，这是三个字节表达无符号整型的极限，所以，每次客户端可以接受到的最大数据包为16M+4个字节。</p><p>至于第四个字节，这是表达当前包的序数的，一个字节能表达的最大正整数是255。我们知道，在MySQL协议中，发送COM_QUERY命令后，服务器返回的数据格式为，响应头为一个包，然后，每一个字段的描述也会是一个包，字段说明后面会跟一个EOF包表示字段描述结束，之后则跟随的是表中的数据，每一个数据包表达一行数据，一般情况，我们每次从数据库里检索的条数，去掉描述协议的部分，在序数中我们还有不少空间可以用在数据记录上，但是，如果总的包数超过255，那会是怎么的情况哪？</p><p>在我们使用数据库的经验中，我们可以经常有机会看到很多条记录同时显示出来的例子，记录数明明超过了255，可是依然正常显示，这是为什么哪？</p><p>经过对MySQL交互嗅探，我发现在数据包次序达到255后，之后紧随的包的次序就变成了0，在Wireshark的协议分析中会认为这是错乱的协议，我想，这应该是MySQL特意使用的方式。</p><p>前后端的交互中，到发现次序达到255后，对序数加1，由于只使用了一个字节，所以数据溢出变成了0，这样的情况在MySQL协议中被认为是合法的，只要前后端认可这种方式，那这种通讯就不会出错。</p><p>所以我认为，在MySQL通讯中，包序号只是用来确认包的次序没有发生错误的，至于序号是几并不重要，只要认定255号后为0号是合法的，那就可以达到正常交互并保证数据序号不会出错的目的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对MySQL协议稍作了解后，我们就知道在协议中，服务端与客户端相互之间的通讯都是以包的形式进行的。&lt;/p&gt;
&lt;p&gt;在这些包中，有一个固定的特征就是前四个字节用途不变，前三个字节表示数据包的长度，第四个字节表示当前包在本次交互中是序数。&lt;/p&gt;
&lt;p&gt;前三个字节最大只能表达1
      
    
    </summary>
    
      <category term="mysql" scheme="https://www.tobycn.org/categories/mysql/"/>
    
      <category term="network" scheme="https://www.tobycn.org/categories/mysql/network/"/>
    
    
      <category term="mysql" scheme="https://www.tobycn.org/tags/mysql/"/>
    
      <category term="network" scheme="https://www.tobycn.org/tags/network/"/>
    
      <category term="mysql packet" scheme="https://www.tobycn.org/tags/mysql-packet/"/>
    
  </entry>
  
  <entry>
    <title>Cocos2D-X learning 2</title>
    <link href="https://www.tobycn.org/2014/03/27/cocos2d-x-learning-2/"/>
    <id>https://www.tobycn.org/2014/03/27/cocos2d-x-learning-2/</id>
    <published>2014-03-27T14:49:58.000Z</published>
    <updated>2018-03-08T02:46:48.049Z</updated>
    
    <content type="html"><![CDATA[<h3>概述</h3><p>今天学习了在Cocos2D-X开发中创建场景，以及在场景中加入图片资源，并通过写一个简单的例子对涉及到的CCLayer和CCSprite进行练习和熟悉。</p><h3>过程</h3><p>首先，场景类需要继承于CCLayer，并且必须实现类函数<code>CCScene *scene()</code>和虚函数<code>bool init()</code>,前者用于建立场景并在场景中加入层以备演示CCSprite，而后者则是用于对本场景进行初始化，代码如下：</p><figure class="highlight c++"><figcaption><span>GameScene.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __HelloCocos__GameScene__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HelloCocos__GameScene__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cocos2d.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cocos2d;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameScene</span>:</span> <span class="keyword">public</span> CCLayer &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> CCScene * <span class="title">scene</span><span class="params">()</span></span>;</span><br><span class="line">    CREATE_FUNC(GameScene);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* defined(__HelloCocos__GameScene__) */</span></span></span><br></pre></td></tr></table></figure><p>以上代码， <code>CREATE_FUNC(GameScene)</code>是一个宏，此宏的功能是为GameScene类创建一个<code>GameScene *GameScene::create()</code>类函数，由于此函数的功能单一，其主要作用就是用来调用对象中的<code>init()</code>方法，因此，使用宏对代码进行简化是一个非常好的方法。</p><a id="more"></a><figure class="highlight c++"><figcaption><span>GameScene.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"GameScene.h"</span></span></span><br><span class="line"></span><br><span class="line">CCScene * GameScene::scene()</span><br><span class="line">&#123;</span><br><span class="line">    CCScene *scene = CCScene::create();</span><br><span class="line">    MyScene *layer = MyScene::create();</span><br><span class="line">    scene-&gt;addChild(layer);</span><br><span class="line">    <span class="keyword">return</span> scene;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> GameScene::init()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!CCLayer::init()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    CCSprite *sprite = CCSprite::create(<span class="string">"Icon-72.png"</span>);</span><br><span class="line">    sprite-&gt;setPosition(ccp(<span class="number">300</span>, <span class="number">300</span>));</span><br><span class="line">    <span class="keyword">this</span>-&gt;addChild(sprite);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上这段代码完成了一个基本的CCLayer子函数，并对其进行合适的初始化。其主要工作为，在<code>CCScene *GameScene::scene()</code>方法中始建一个CCScene对象，并将此类的对象加入为子元素。</p><p>同时，在<code>bool GameScene::init()</code>方法中用一个图片文件初始化一个精灵对象，并将其加入层中的(300,300)位置。</p><p>其中，<code>ccp(300, 300)</code>是一个宏调用，这个宏的作用是实例化一个CCPoint对象，CCPoint类指示了屏幕上的一个坐标。</p><p>PS：在Cocos2D中，坐标点(0,0)为左下角，这一点与Web及iOS应用开发都是不同的，Web与iOS坐标(0,0)为显示区域的右上角。</p><figure class="highlight c++"><figcaption><span>AppDelegate.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"AppDelegate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"GameScene.h"</span></span></span><br><span class="line"></span><br><span class="line">USING_NS_CC;</span><br><span class="line"></span><br><span class="line">AppDelegate::AppDelegate() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AppDelegate::~AppDelegate() </span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> AppDelegate::applicationDidFinishLaunching() &#123;</span><br><span class="line">    <span class="comment">// initialize director</span></span><br><span class="line">    CCDirector* pDirector = CCDirector::sharedDirector();</span><br><span class="line">    CCEGLView* pEGLView = CCEGLView::sharedOpenGLView();</span><br><span class="line"></span><br><span class="line">    pDirector-&gt;setOpenGLView(pEGLView);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// turn on display FPS</span></span><br><span class="line">    pDirector-&gt;setDisplayStats(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set FPS. the default value is 1.0/60 if you don't call this</span></span><br><span class="line">    pDirector-&gt;setAnimationInterval(<span class="number">1.0</span> / <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a scene. it's an autorelease object</span></span><br><span class="line">    CCScene *pScene = GameScene::scene();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// run</span></span><br><span class="line">    pDirector-&gt;runWithScene(pScene);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This function will be called when the app is inactive. When comes a phone call,it's be invoked too</span></span><br><span class="line"><span class="keyword">void</span> AppDelegate::applicationDidEnterBackground() &#123;</span><br><span class="line">    CCDirector::sharedDirector()-&gt;stopAnimation();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if you use SimpleAudioEngine, it must be pause</span></span><br><span class="line">    <span class="comment">// SimpleAudioEngine::sharedEngine()-&gt;pauseBackgroundMusic();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this function will be called when the app is active again</span></span><br><span class="line"><span class="keyword">void</span> AppDelegate::applicationWillEnterForeground() &#123;</span><br><span class="line">    CCDirector::sharedDirector()-&gt;startAnimation();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if you use SimpleAudioEngine, it must resume here</span></span><br><span class="line">    <span class="comment">// SimpleAudioEngine::sharedEngine()-&gt;resumeBackgroundMusic();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码为建立Cocos2D-X项目时自动生成的，只需要修改成与上面一致，主要是此处的修改一致<code>CCScene *pScene = GameScene::scene()</code>。</p><h3>结束</h3><p>到这里，第一次在Cocos2D-X中写代码就完成了，到目前为止，感觉在游戏中的概念并不难接受，但是，这只是开头，学一种技能最重要的是能够坚持下去，否则再简单的东西也是学不到手的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3&gt;概述&lt;/h3&gt;
&lt;p&gt;今天学习了在Cocos2D-X开发中创建场景，以及在场景中加入图片资源，并通过写一个简单的例子对涉及到的CCLayer和CCSprite进行练习和熟悉。&lt;/p&gt;
&lt;h3&gt;过程&lt;/h3&gt;
&lt;p&gt;首先，场景类需要继承于CCLayer，并且必须实现类函数&lt;code&gt;CCScene *scene()&lt;/code&gt;和虚函数&lt;code&gt;bool init()&lt;/code&gt;,前者用于建立场景并在场景中加入层以备演示CCSprite，而后者则是用于对本场景进行初始化，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;figcaption&gt;&lt;span&gt;GameScene.h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifndef&lt;/span&gt; __HelloCocos__GameScene__&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; __HelloCocos__GameScene__&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&quot;cocos2d.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; cocos2d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GameScene&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; CCLayer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; CCScene * &lt;span class=&quot;title&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CREATE_FUNC(GameScene);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* defined(__HelloCocos__GameScene__) */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上代码， &lt;code&gt;CREATE_FUNC(GameScene)&lt;/code&gt;是一个宏，此宏的功能是为GameScene类创建一个&lt;code&gt;GameScene *GameScene::create()&lt;/code&gt;类函数，由于此函数的功能单一，其主要作用就是用来调用对象中的&lt;code&gt;init()&lt;/code&gt;方法，因此，使用宏对代码进行简化是一个非常好的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Cocos2D" scheme="https://www.tobycn.org/categories/Cocos2D/"/>
    
    
      <category term="web" scheme="https://www.tobycn.org/tags/web/"/>
    
      <category term="game" scheme="https://www.tobycn.org/tags/game/"/>
    
      <category term="cocos2d-x" scheme="https://www.tobycn.org/tags/cocos2d-x/"/>
    
      <category term="cocos2d" scheme="https://www.tobycn.org/tags/cocos2d/"/>
    
  </entry>
  
  <entry>
    <title>Cocos2D-X learning 1</title>
    <link href="https://www.tobycn.org/2014/03/27/cocos2d-x-learning-1/"/>
    <id>https://www.tobycn.org/2014/03/27/cocos2d-x-learning-1/</id>
    <published>2014-03-26T23:41:48.000Z</published>
    <updated>2018-03-08T02:46:48.049Z</updated>
    
    <content type="html"><![CDATA[<p>最近学了一些关于Cocos2D-X的知道，在这里整理一下。</p><p>一直以来我做的都是后端的工作，现在突然有兴趣做一些前端的关于移动程序开发以及游戏开发方面的程序，对很多概念都是非常陌生的，不知道我后端开发方面的经验放在前端有没有一些用处。</p><h3>Cocos2D的简单介绍</h3><p>Cocos2D是一个应用非常广泛的2D游戏开发引擎，可以帮助对页面的元素进行方便的管理以及移动变形等操作，Cocos2D是基于Objective-C语言的，所以在iOS上的开发非常方便，但是跨平台方面就较差了，所以，就有了Cocos2D-X这一个基于C++的复刻版。</p><h3>Cocos2D的一些概念（这里只说我学到的）</h3><ol><li>导演类CCDirector：这个类可以算是管理类，可以通过这个类获取到游戏运行界面的一些元素的属性，比如winSize等，在游戏中可以用来管理场景等。本类的使用方式为单例，通过类方法CCDirector::sharedDirecter获取对象。</li><li>OpenGL类CCEGLView：对于OpenGL我不是很了解，但是我猜是可以提供类似于DirectX之类的功能，应该是管理图像动画等操作的，CCDirector需要绑定一个CCEGLView对象才可以运行，也是以单例的方式使用，通过类方法CCEGLView::sharedOpenGLView获取对象。</li><li>场景类CCScene: 场景类继承于CCNode，在其中可以放置CCLayer类。</li><li>层CCLayer：此类同样继承于CCNode，在其中可以放置CCSprite类，我的理解CCLayer就相当于电影中的幕次吧。在游戏中定义的不同游戏场景都需要继承CCLayer，必须实现的方法有virtual CCScene * scene()/static bool init()/CREATE_FUNC(CustomSceneName)，其中CREATE_FUNC是宏，可以帮助建立create方法。</li><li>精灵类CCSprite：这应该是场景中更小的元素，在游戏中放置的背景、图片等都需要使用CCSprite，与CCScene一样都是继承自CCNode，由此可以判断，CCSprite类也是一个小场景，在其中可以加入其它的子元素，共同完成更复杂的动作。</li></ol><p>目前基本只学到了这些，明天继续。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近学了一些关于Cocos2D-X的知道，在这里整理一下。&lt;/p&gt;
&lt;p&gt;一直以来我做的都是后端的工作，现在突然有兴趣做一些前端的关于移动程序开发以及游戏开发方面的程序，对很多概念都是非常陌生的，不知道我后端开发方面的经验放在前端有没有一些用处。&lt;/p&gt;
&lt;h3&gt;Cocos
      
    
    </summary>
    
      <category term="Cocos2D" scheme="https://www.tobycn.org/categories/Cocos2D/"/>
    
    
      <category term="game" scheme="https://www.tobycn.org/tags/game/"/>
    
      <category term="cocos2d-x" scheme="https://www.tobycn.org/tags/cocos2d-x/"/>
    
      <category term="cocos2d" scheme="https://www.tobycn.org/tags/cocos2d/"/>
    
  </entry>
  
</feed>
